'use client';

import React, { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import {
  FaSearch,
  FaCalendarCheck,
  FaBell,
  FaServer,
  FaChartPie,
  FaTasks,
  FaUsers,
  FaCloudSun,
  FaSignOutAlt,
  FaRocket,
  FaClipboardList,
  FaBuilding,
  FaUserShield,
  FaPlusCircle,
  FaHistory,
  FaBug,
} from "react-icons/fa";
import { motion } from "framer-motion";

const Sidebar = () => {
  const router = useRouter();
  const [role, setRole] = useState<string | null>(null);

  useEffect(() => {
    const storedRole = localStorage.getItem("role");
    if (storedRole) {
      setRole(storedRole);
    }
  }, []);

  const handleNavigation = (path: string) => router.push(path);

  const MenuItem = ({
    label,
    icon,
    path,
    color = "text-white",
  }: {
    label: string;
    icon: React.ReactNode;
    path?: string;
    color?: string;
  }) => (
    <motion.div
      whileHover={{ scale: 1.05 }}
      className={`flex flex-col items-center space-y-1 py-2 px-3 rounded cursor-pointer hover:bg-red-700 transition-all w-full text-center ${path ? "hover:scale-[1.01]" : "cursor-default"}`}
      onClick={() => path && handleNavigation(path)}
    >
      <div className={`text-2xl ${color}`}>{icon}</div>
      <span className="text-base text-white font-medium">{label}</span>
    </motion.div>
  );

  const SectionTitle = ({ title }: { title: string }) => (
    <div className="text-sm uppercase text-gray-100 font-semibold mt-6 mb-2 tracking-wide text-center">{title}</div>
  );

  if (!role) {
    return null; // or loading spinner
  }

  return (
    <motion.aside
      initial={{ x: -50, opacity: 0 }}
      animate={{ x: 0, opacity: 1 }}
      transition={{ duration: 0.4 }}
      className="fixed top-20 left-0 z-40 bottom-0 w-64 bg-red-600 shadow-sm flex flex-col justify-between items-center p-6 overflow-y-auto gap-6"
    >
      <div className="w-full flex flex-col items-center">
        {role === "User" && (
          <>
            <SectionTitle title="Actions" />
            <MenuItem label="Créer Incident" icon={<FaPlusCircle />} path="/view/create-incident" />
            <MenuItem label="Incidents en cours" icon={<FaTasks />} path="/view/incident-en-cours" color="text-yellow-200" />
            <MenuItem label="Historique" icon={<FaHistory />} path="/view/historique-incident" color="text-green-300" />
            <MenuItem label="Mes Notifications" icon={<FaBell />} path="/view/notification-page" color="text-blue-300" />
            <MenuItem label="Statistiques" icon={<FaChartPie />} path="/view/user-statistics" color="text-purple-300" />
          </>
        )}

        {role === "BA" && (
          <>
            <SectionTitle title="Actions" />
            <MenuItem label="Assigner Incident" icon={<FaServer />} path="/view/assign-incident" color="text-orange-200" />
            <MenuItem label="Dashboard Employés" icon={<FaUsers />} path="/view/employees-dashboard" color="text-blue-300" />
            <MenuItem label="Statut Incidents" icon={<FaCalendarCheck />} path="/view/status-tracking" color="text-green-300" />
            <MenuItem label="Notifications" icon={<FaBell />} path="/view/notification-page" color="text-yellow-300" />
          </>
        )}

        {role === "Développeur" && (
          <>
            <SectionTitle title="Actions" />
            <MenuItem label="Prendre en charge" icon={<FaBug />} path="/view/take-charge" color="text-red-300" />
            <MenuItem label="Mes Notifications" icon={<FaBell />} path="/view/notification-page" color="text-blue-300" />
            <MenuItem label="Incidents assignés" icon={<FaTasks />} path="/view/assigned-incidents" color="text-orange-300" />
            <MenuItem label="Résolus" icon={<FaHistory />} path="/view/historique-incident" color="text-green-400" />
          </>
        )}

        {role === "Admin" && (
          <>
            <SectionTitle title="Actions" />
            <MenuItem label="Dashboard" icon={<FaChartPie />} path="/view/dashboards" color="text-purple-200" />
            <MenuItem label="Manage Roles" icon={<FaUserShield />} path="/view/manage-roles" color="text-yellow-200" />
            <MenuItem label="Employees" icon={<FaUsers />} path="/view/employees-dashboard" color="text-blue-200" />
            <MenuItem label="Historique Incidents" icon={<FaHistory />} path="/view/historique-incident" color="text-green-200" />
          </>
        )}

        <SectionTitle title="Extras" />
        <MenuItem label="API Weather" icon={<FaCloudSun />} path="/view/api-meteo" color="text-yellow-100" />
        <MenuItem label="Programme" icon={<FaRocket />} path="/view/startup-program" color="text-indigo-300" />
        <MenuItem label="Partenariats" icon={<FaBuilding />} path="/view/partners" color="text-pink-200" />
      </div>

      <div className="border-t border-red-400 pt-4 w-full flex justify-center">
        <MenuItem label="Logout" icon={<FaSignOutAlt />} path="/login" color="text-red-200" />
      </div>
    </motion.aside>
  );
};

export default Sidebar;

'use client';

import { useState, useRef, useEffect } from "react";
import { LogOut } from "lucide-react";
import { FiBell, FiSettings } from "react-icons/fi";
import Image from "next/image";
import { useRouter } from "next/navigation";
import Notifications from "../notification-user/notificationuser";

const HeaderBar = () => {
  const router = useRouter();
  const [openUserMenu, setOpenUserMenu] = useState(false);
  const [openNotifMenu, setOpenNotifMenu] = useState(false);
  const [searchFocused, setSearchFocused] = useState(false);
  const menuRef = useRef<HTMLDivElement>(null);

  const user = {
    name: "Omar Bari",
    email: "omar.bari@email.com",
    role: "Admin",
  };

  const getInitials = (name: string): string => {
    return name
      .split(" ")
      .map((word: string) => word[0])
      .join("")
      .slice(0, 2)
      .toUpperCase();
  };

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {
        setOpenUserMenu(false);
        setOpenNotifMenu(false);
        setSearchFocused(false);
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, []);

  return (
    <header className="fixed top-0 left-0 right-0 z-50 bg-white shadow px-6 py-3 flex items-center justify-between text-black w-full h-20">
      {/* Left - Logo */}
      <div className="flex items-center gap-4 w-1/4">
        <Image
          src="/images/logoImage.png"
          alt="Logo SG-FIX"
          width={160}
          height={60}
        />
      </div>

      {/* Center - Search with contextual panel */}
      <div className="flex justify-center w-2/4">
        <div className="relative w-full max-w-[600px]">
          <input
            type="text"
            placeholder="Search incident..."
            onFocus={() => setSearchFocused(true)}
            className="w-full px-5 py-2.5 rounded-full border border-gray-300 bg-gray-100 text-base focus:outline-none focus:ring-2 focus:ring-red-400"
          />
          {searchFocused && (
            <div className="absolute top-12 w-full rounded-xl bg-white shadow-xl z-50 p-4 animate-fade-in-down">
              {/* Quick Actions */}
              <div className="mb-4">
                <h3 className="text-sm font-semibold text-gray-500 mb-2">Quick Actions</h3>
                <div className="flex gap-2 flex-wrap">
                  <button className="px-4 py-1 rounded-full bg-gray-100 hover:bg-gray-200 text-sm">Créer Incident</button>
                  <button className="px-4 py-1 rounded-full bg-gray-100 hover:bg-gray-200 text-sm">Affectation</button>
                  <button className="px-4 py-1 rounded-full bg-gray-100 hover:bg-gray-200 text-sm">Historique</button>
                  <button className="px-4 py-1 rounded-full bg-gray-100 hover:bg-gray-200 text-sm">Statistiques</button>
                </div>
              </div>

              {/* Main Actions */}
              <div className="mb-4">
                <h3 className="text-sm font-semibold text-gray-500 mb-2">Main Actions</h3>
                <ul className="space-y-2 text-sm text-gray-700">
                  <li className="hover:bg-gray-100 p-2 rounded-md cursor-pointer">Créer un nouvel incident</li>
                  <li className="hover:bg-gray-100 p-2 rounded-md cursor-pointer">Assigner un incident</li>
                  <li className="hover:bg-gray-100 p-2 rounded-md cursor-pointer">Consulter incidents en cours</li>
                  <li className="hover:bg-gray-100 p-2 rounded-md cursor-pointer">Voir incidents archivés</li>
                </ul>
              </div>         
            </div>
          )}
        </div>
      </div>

      {/* Right - Icons + Profile */}
      <div className="flex items-center gap-4 w-1/4 justify-end" ref={menuRef}>
        {/* Notifications */}
        <div className="relative cursor-pointer" onClick={() => setOpenNotifMenu((v) => !v)}>
          <FiBell className="h-6 w-6 text-gray-700" />
          <span className="absolute -top-1 -right-1 h-2 w-2 rounded-full bg-red-500 border-2 border-white" />
          {openNotifMenu && (
            <div className="absolute right-0 mt-3 z-50 w-screen max-w-md ml-auto">
              <Notifications />
            </div>
          )}
        </div>

        {/* Settings */}
        <FiSettings className="h-6 w-6 text-gray-700 cursor-pointer" />

        {/* User Menu */}
        <div className="relative">
          <div className="flex flex-col items-center cursor-pointer">
            <div
              className="w-10 h-10 bg-gray-300 rounded-full flex items-center justify-center text-base font-semibold hover:bg-gray-400 transition"
              onClick={() => setOpenUserMenu((v) => !v)}
            >
              {getInitials(user.name)}
            </div>
          </div>
          {openUserMenu && (
            <div className="absolute right-0 mt-4 w-56 bg-white rounded-xl shadow-xl border border-gray-100 z-50 animate-fade-in-down py-3 px-4">
              <div className="flex flex-col items-center pb-3 border-b border-gray-200">
                <div className="w-12 h-12 bg-blue-500 rounded-full flex items-center justify-center text-white text-xl font-bold mb-1">
                  {getInitials(user.name)}
                </div>
                <div className="font-semibold text-lg">{user.name}</div>
                <div className="text-sm text-gray-500">{user.email}</div>
                <div className="text-xs text-gray-400">{user.role}</div>
              </div>
              <button
                className="flex items-center gap-2 mt-3 px-2 py-2 w-full text-left text-red-500 hover:bg-gray-100 rounded transition"
                onClick={() => {
                  setOpenUserMenu(false);
                  router.push("/");
                }}
              >
                <LogOut className="w-5 h-5" /> Se déconnecter
              </button>
            </div>
          )}
        </div>
      </div>

      <style jsx>{`
        .animate-fade-in-down {
          animation: fadeInDown 0.17s cubic-bezier(.39, .575, .565, 1) both;
        }
        @keyframes fadeInDown {
          from {
            opacity: 0;
            transform: translateY(-10px) scale(0.98);
          }
          to {
            opacity: 1;
            transform: translateY(0) scale(1);
          }
        }
      `}</style>
    </header>
  );
};

export default HeaderBar;

