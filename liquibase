'use client';

import { useState, useRef, useEffect } from 'react';
import { LogOut } from 'lucide-react';
import { FiBell, FiSettings } from 'react-icons/fi';
import Image from 'next/image';
import { useRouter } from 'next/navigation';
import Notifications from '../notification-user/notificationuser';

const HeaderBar = () => {
  const router = useRouter();
  const [openUserMenu, setOpenUserMenu] = useState(false);
  const [openNotifMenu, setOpenNotifMenu] = useState(false);
  const [searchFocused, setSearchFocused] = useState(false);
  const menuRef = useRef<HTMLDivElement>(null);

  const user = {
    name: 'Omar Bari',
    email: 'omar.bari@email.com',
    role: 'Admin',
  };

  const getInitials = (name: string): string => {
    return name
      .split(' ')
      .map((word: string) => word[0])
      .join('')
      .slice(0, 2)
      .toUpperCase();
  };

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {
        setOpenUserMenu(false);
        setOpenNotifMenu(false);
        setSearchFocused(false);
      }
    };
    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  const handleNavigation = (path: string) => {
    console.log(`Navigating to: ${path}`); // Débogage
    router.push(path);
  };

  return (
    <>
      {/* Flou en arrière-plan quand recherche active */}
      {searchFocused && (
        <div
          className="fixed inset-0 z-40 backdrop-blur-sm bg-black/20 transition duration-200"
          onClick={() => setSearchFocused(false)}
        />
      )}

      <header className="relative z-50 bg-white shadow px-6 py-3 flex items-center justify-between text-black w-full h-20" ref={menuRef}>
        {/* Left - Logo */}
        <div className="flex items-center gap-4 w-1/4">
          <Image
            src="/images/logoImage.png"
            alt="Logo SG-FIX"
            width={180}
            height={80}
          />
        </div>

        {/* Center - Search with contextual panel */}
        <div className="flex justify-center w-2/4">
          <div className="relative w-full max-w-[600px]">
            <input
              type="text"
              placeholder="Search incident..."
              onFocus={() => setSearchFocused(true)}
              className="w-full px-5 py-2.5 rounded-full border border-gray-300 bg-gray-100 text-base focus:outline-none focus:ring-2 focus:ring-red-400"
            />
            {searchFocused && (
              <div className="absolute top-12 w-full rounded-xl bg-white shadow-xl z-50 p-4 animate-fade-in-down">
                {/* Quick Actions */}
                <div className="mb-4">
                  <h3 className="text-sm font-semibold text-gray-500 mb-2">Quick Actions</h3>
                  <div className="flex gap-2 flex-wrap">
                    <button
                      className="px-4 py-1 rounded-full bg-gray-100 hover:bg-gray-200 text-sm"
                      onClick={() => handleNavigation('/view/create-incident')}
                    >
                      Créer Incident
                    </button>
                    <button
                      className="px-4 py-1 rounded-full bg-gray-100 hover:bg-gray-200 text-sm"
                      onClick={() => handleNavigation('/view/affectation')}
                    >
                      Affectation
                    </button>
                    <button
                      className="px-4 py-1 rounded-full bg-gray-100 hover:bg-gray-200 text-sm"
                      onClick={() => handleNavigation('/view/historique')}
                    >
                      Historique
                    </button>
                    <button
                      className="px-4 py-1 rounded-full bg-gray-100 hover:bg-gray-200 text-sm"
                      onClick={() => handleNavigation('/view/statistiques')}
                    >
                      Statistiques
                    </button>
                  </div>
                </div>

                {/* Main Actions */}
                <div className="mb-4">
                  <h3 className="text-sm font-semibold text-gray-500 mb-2">Main Actions</h3>
                  <ul className="space-y-2 text-sm text-gray-700">
                    <li
                      className="hover:bg-gray-100 p-2 rounded-md cursor-pointer"
                      onClick={() => handleNavigation('/view/create-incident')}
                    >
                      Créer un nouvel incident
                    </li>
                    <li
                      className="hover:bg-gray-100 p-2 rounded-md cursor-pointer"
                      onClick={() => handleNavigation('/view/affectation')}
                    >
                      Assigner un incident
                    </li>
                    <li
                      className="hover:bg-gray-100 p-2 rounded-md cursor-pointer"
                      onClick={() => handleNavigation('/view/incidents-en-cours')}
                    >
                      Consulter incidents en cours
                    </li>
                    <li
                      className="hover:bg-gray-100 p-2 rounded-md cursor-pointer"
                      onClick={() => handleNavigation('/view/incidents-archives')}
                    >
                      Voir incidents archivés
                    </li>
                  </ul>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Right - Icons + Profile */}
        <div className="flex items-center gap-4 w-1/4 justify-end">
          {/* Notifications */}
          <div className="relative cursor-pointer" onClick={() => setOpenNotifMenu((v) => !v)}>
            <FiBell className="h-6 w-6 text-gray-700" />
            <span className="absolute -top-1 -right-1 h-2 w-2 rounded-full bg-red-500 border-2 border-white" />
            {openNotifMenu && (
              <div className="absolute right-0 mt-3 z-50 w-screen max-w-md ml-auto">
                <Notifications />
              </div>
            )}
          </div>

          {/* Settings */}
          <FiSettings className="h-6 w-6 text-gray-700 cursor-pointer" />

          {/* User Menu */}
          <div className="relative">
            <div className="flex flex-col items-center cursor-pointer">
              <div
                className="w-10 h-10 bg-gray-300 rounded-full flex items-center justify-center text-base font-semibold hover:bg-gray-400 transition"
                onClick={() => setOpenUserMenu((v) => !v)}
              >
                {getInitials(user.name)}
              </div>
            </div>
            {openUserMenu && (
              <div className="absolute right-0 mt-4 w-56 bg-white rounded-xl shadow-xl border border-gray-100 z-50 animate-fade-in-down py-3 px-4">
                <div className="flex flex-col items-center pb-3 border-b border-gray-200">
                  <div className="w-12 h-12 bg-blue-500 rounded-full flex items-center justify-center text-white text-xl font-bold mb-1">
                    {getInitials(user.name)}
                  </div>
                  <div className="font-semibold text-lg">{user.name}</div>
                  <div className="text-sm text-gray-500">{user.email}</div>
                  <div className="text-xs text-gray-400">{user.role}</div>
                </div>
                <button
                  className="flex items-center gap-2 mt-3 px-2 py-2 w-full text-left text-red-500 hover:bg-gray-100 rounded transition"
                  onClick={() => {
                    setOpenUserMenu(false);
                    router.push('/');
                  }}
                >
                  <LogOut className="w-5 h-5" /> Se déconnecter
                </button>
              </div>
            )}
          </div>
        </div>
      </header>

      {/* Animation CSS */}
      <style jsx>{`
        .animate-fade-in-down {
          animation: fadeInDown 0.17s cubic-bezier(0.39, 0.575, 0.565, 1) both;
        }
        @keyframes fadeInDown {
          from {
            opacity: 0;
            transform: translateY(-10px) scale(0.98);
          }
          to {
            opacity: 1;
            transform: translateY(0) scale(1);
          }
        }
      `}</style>
    </>
  );
};

export default HeaderBar;
