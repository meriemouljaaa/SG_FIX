import requests
import time
import json

LOKI_URL = "http://localhost:3100/loki/api/v1/query_range"

def is_incident(message):
    return any(keyword in message.lower() for keyword in [
        "exception", "error", "failed", "refused", "timed out", "unknownhost"
    ])

def parse_otel_log(log_line):
    try:
        obj = json.loads(log_line)

        # Lecture des attributs avec fallback
        timestamp = obj.get("timestamp") or obj.get("time") or "N/A"
        level = obj.get("severity") or obj.get("severityText") or obj.get("level") or "N/A"
        resource = obj.get("resource", {}) or {}
        service = (
            resource.get("service.name") or
            obj.get("service.name") or
            obj.get("service_name") or
            "unknown_service"
        )
        message = obj.get("body") or obj.get("message") or str(obj)

        return {
            "timestamp": timestamp,
            "level": level,
            "service_name": service,
            "message": message[:150],
            "incident": "üö®" if is_incident(message) else ""
        }

    except (json.JSONDecodeError, TypeError):
        return {
            "timestamp": "N/A",
            "level": "N/A",
            "service_name": "unknown",
            "message": log_line[:150],
            "incident": "üö®" if is_incident(log_line) else ""
        }

def get_logs():
    now = int(time.time() * 1_000_000_000)
    start = now - 60 * 1_000_000_000  # 60 secondes en nanosecondes

    # Ce label peut √™tre adapt√© selon votre config Loki
    query = '{service_name=~".+"}'

    params = {
        "query": query,
        "start": start,
        "end": now,
        "limit": 100,
        "direction": "forward"
    }

    try:
        response = requests.get(LOKI_URL, params=params)
        response.raise_for_status()
        data = response.json()

        logs = []
        for stream in data.get("data", {}).get("result", []):
            for entry in stream.get("values", []):
                log_line = entry[1]
                parsed = parse_otel_log(log_line)
                logs.append(parsed)

        return logs

    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erreur lors de l'appel √† Loki : {e}")
        return []

def display_logs(logs):
    print("\nüìã Logs r√©cup√©r√©s :\n")
    for log in logs:
        print(f"[{log['timestamp']}] [{log['level']}] [{log['service_name']}] {log['incident']} {log['message']}")

def run_loop():
    print("üì° R√©cup√©ration des logs OpenTelemetry depuis Loki...\n")
    while True:
        logs = get_logs()
        if logs:
            print(f"\n‚úÖ {len(logs)} logs r√©cup√©r√©s")
            display_logs(logs)
        else:
            print("‚ö†Ô∏è Aucun log trouv√©.")
        time.sleep(10)

if __name__ == "__main__":
    run_loop()
