import requests
import time
import re

LOKI_URL = "http://localhost:3100/loki/api/v1/query_range"

def is_incident(log_line):
    return any(keyword in log_line.lower() for keyword in [
        "exception", "error", "failed", "unknownhost", "refused", "timed out"
    ])

def parse_log_line(log_line):
    pattern = r"^(?P<time>[\d\-T:\.Z]+)\s+(?P<level>[A-Z]+)\s+.*?\]\s+(?P<msg>.*)$"
    match = re.match(pattern, log_line)
    if match:
        return {
            "time": match.group("time"),
            "level": match.group("level"),
            "message": match.group("msg")[:120],
            "incident": "üö®" if is_incident(log_line) else ""
        }
    return {
        "time": "N/A",
        "level": "N/A",
        "message": log_line[:120],
        "incident": "üö®" if is_incident(log_line) else ""
    }

def get_logs():
    now = int(time.time() * 1_000_000_000)
    start = now - 60 * 1_000_000_000
    query = '{service_name="observability-spring-grafana"}'

    params = {
        "query": query,
        "start": start,
        "end": now,
        "limit": 100,
        "direction": "forward"
    }

    try:
        response = requests.get(LOKI_URL, params=params)
        response.raise_for_status()
        data = response.json()
        logs = []

        for stream in data.get("data", {}).get("result", []):
            service_name = stream.get("stream", {}).get("service_name", "N/A")

            for entry in stream.get("values", []):
                message = entry[1]
                parsed = parse_log_line(message)
                parsed["service_name"] = service_name
                logs.append(parsed)

        return logs

    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erreur de requ√™te Loki : {e}")
        return []

def display_logs(logs):
    print("\nüìã Logs r√©cup√©r√©s :\n")
    for log in logs:
        print(f"[{log['time']}] [{log['level']}] [{log['service_name']}] {log['incident']} {log['message']}")

def run_loop():
    print("üì° D√©marrage de la r√©cup√©ration des logs Loki...\n")
    while True:
        logs = get_logs()
        if logs:
            print(f"\n‚úÖ {len(logs)} logs r√©cup√©r√©s")
            display_logs(logs)
        else:
            print("‚ö†Ô∏è Aucun log trouv√©.")
        time.sleep(10)

if __name__ == "__main__":
    run_loop()
