// AppManager.ts

import jwtDecode from 'jwt-decode';

const SGCONNECT_AUTH_URL = "https://auth.sgconnect.com/oauth/authorize";
const SGCONNECT_TOKEN_URL = "https://auth.sgconnect.com/oauth/token";

const CLIENT_ID = "your-client-id";
const REDIRECT_URI = "http://localhost:3000/callback";
const SCOPE = "openid profile email";
const RESPONSE_TYPE = "code";

class AppManager {
  // Génère un code_verifier aléatoire
  private static generateCodeVerifier(length = 128): string {
    const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~";
    const randomValues = crypto.getRandomValues(new Uint8Array(length));
    return Array.from(randomValues).map(x => chars[x % chars.length]).join('');
  }

  // Encode ArrayBuffer to base64url string
  private static base64UrlEncode(buffer: ArrayBuffer): string {
    const bytes = new Uint8Array(buffer);
    let binary = '';
    for (let i = 0; i < bytes.byteLength; i++) {
      binary += String.fromCharCode(bytes[i]);
    }
    return btoa(binary)
      .replace(/\+/g, '-')
      .replace(/\//g, '_')
      .replace(/=+$/, '');
  }

  // Transforme le code_verifier en code_challenge
  private static async generateCodeChallenge(codeVerifier: string): Promise<string> {
    const encoder = new TextEncoder();
    const data = encoder.encode(codeVerifier);
    const digest = await crypto.subtle.digest("SHA-256", data);
    return this.base64UrlEncode(digest);
  }

  // Construit l'URL d'autorisation OAuth2 avec PKCE
  public static async authorize(): Promise<string> {
    const codeVerifier = this.generateCodeVerifier();
    const codeChallenge = await this.generateCodeChallenge(codeVerifier);

    sessionStorage.setItem("pkce_code_verifier", codeVerifier);

    const params = new URLSearchParams({
      response_type: RESPONSE_TYPE,
      client_id: CLIENT_ID,
      redirect_uri: REDIRECT_URI,
      scope: SCOPE,
      code_challenge_method: "S256",
      code_challenge: codeChallenge
    });

    return `${SGCONNECT_AUTH_URL}?${params.toString()}`;
  }

  // Échange le code contre un token
  public static async getToken(code: string): Promise<any> {
    const codeVerifier = sessionStorage.getItem("pkce_code_verifier");

    const response = await fetch(SGCONNECT_TOKEN_URL, {
      method: "POST",
      headers: {
        "Content-Type": "application/x-www-form-urlencoded"
      },
      body: new URLSearchParams({
        grant_type: "authorization_code",
        client_id: CLIENT_ID,
        redirect_uri: REDIRECT_URI,
        code_verifier: codeVerifier || "",
        code: code
      })
    });

    const data = await response.json();

    if (!response.ok) {
      throw new Error(data.error_description || "Erreur lors de l'obtention du token");
    }

    return data;
  }

  // Décode un JWT
  public static decodeJWT(token: string): any {
    return jwtDecode(token);
  }
}

export default AppManager;
