import jwtDecode from 'jwt-decode';

const SGCONNECT_AUTH_URL = "https://auth.sgconnect.com/oauth/authorize";
const SGCONNECT_TOKEN_URL = "https://auth.sgconnect.com/oauth/token";

const CLIENT_ID = "your-client-id";
const REDIRECT_URI = "http://localhost:3000/callback";
const SCOPE = "openid profile email";
const RESPONSE_TYPE = "code";

/**
 * Génère un code_verifier aléatoire
 */
function generateCodeVerifier(length = 128): string {
  const possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~";
  return Array.from(crypto.getRandomValues(new Uint8Array(length)))
    .map(x => possible[x % possible.length])
    .join('');
}

/**
 * Transforme le code_verifier en code_challenge (SHA256 + base64url)
 */
async function generateCodeChallenge(codeVerifier: string): Promise<string> {
  const encoder = new TextEncoder();
  const data = encoder.encode(codeVerifier);
  const digest = await crypto.subtle.digest("SHA-256", data);
  const base64url = btoa(String.fromCharCode(...new Uint8Array(digest)))
    .replace(/\+/g, '-')
    .replace(/\//g, '_')
    .replace(/=+$/, '');
  return base64url;
}

/**
 * Construit l'URL d'autorisation OAuth2
 */
export async function authorize(): Promise<string> {
  const codeVerifier = generateCodeVerifier();
  const codeChallenge = await generateCodeChallenge(codeVerifier);

  // Sauvegarde temporaire du code_verifier (localStorage ou sessionStorage)
  sessionStorage.setItem("pkce_code_verifier", codeVerifier);

  const params = new URLSearchParams({
    response_type: RESPONSE_TYPE,
    client_id: CLIENT_ID,
    redirect_uri: REDIRECT_URI,
    scope: SCOPE,
    code_challenge_method: "S256",
    code_challenge: codeChallenge
  });

  return `${SGCONNECT_AUTH_URL}?${params.toString()}`;
}

/**
 * Échange le code contre un access_token
 */
export async function getToken(code: string): Promise<any> {
  const codeVerifier = sessionStorage.getItem("pkce_code_verifier");

  const response = await fetch(SGCONNECT_TOKEN_URL, {
    method: "POST",
    headers: {
      "Content-Type": "application/x-www-form-urlencoded"
    },
    body: new URLSearchParams({
      grant_type: "authorization_code",
      client_id: CLIENT_ID,
      code,
      redirect_uri: REDIRECT_URI,
      code_verifier: codeVerifier || ""
    })
  });

  const data = await response.json();

  if (!response.ok) {
    throw new Error(`Token error: ${data.error_description || data.error}`);
  }

  return data;
}

/**
 * Décode un JWT access_token
 */
export function decodeJWT(token: string): any {
  return jwtDecode(token);
}
