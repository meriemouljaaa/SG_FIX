import re

def generate_description(log):
    """
    G√©n√©re une description claire √† partir du message du log.
    Aucun appel externe ‚Äî adapt√© aux environnements sensibles comme SG.
    """
    message = log.get("message", "")
    service = log.get("service_name", "service inconnu")
    level = log.get("level", "N/A")
    msg_lower = message.lower()

    # üîç Cas courants
    if "nullpointerexception" in msg_lower:
        return f"Erreur critique : une variable non initialis√©e a √©t√© utilis√©e dans le service '{service}'."
    elif "connection refused" in msg_lower:
        return f"La connexion a √©chou√© ‚Äî le service '{service}' n'a pas pu atteindre le serveur cible."
    elif "timeout" in msg_lower or "timed out" in msg_lower:
        return f"Un d√©lai d‚Äôattente a √©t√© d√©pass√©, le service '{service}' n‚Äôa pas pu r√©pondre √† temps."
    elif "sql" in msg_lower and "exception" in msg_lower:
        return f"Une erreur SQL a √©t√© rencontr√©e dans le service '{service}'."
    elif "authentication failed" in msg_lower or "access denied" in msg_lower:
        return f"√âchec d‚Äôauthentification dans '{service}' ‚Äî utilisateur ou mot de passe invalide."
    elif "not found" in msg_lower or "404" in msg_lower:
        return f"Ressource non trouv√©e ‚Äî le service '{service}' a tent√© d‚Äôacc√©der √† une URL inexistante."

    # üß† Exception g√©n√©rique
    match = re.search(r"\b(\w+Exception)\b", message)
    if match:
        exception_type = match.group(1)
        return f"Une exception de type {exception_type} a √©t√© d√©tect√©e dans le service '{service}'."

    # üßæ Par d√©faut
    return f"Une erreur de niveau {level} a √©t√© d√©tect√©e dans le service '{service}'. Message partiel : {message[:100]}"

