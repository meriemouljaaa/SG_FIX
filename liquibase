'use client';

import React, { useEffect, useState } from 'react';
import {
  ArrowUpDown, Download, Search, SlidersHorizontal
} from "lucide-react";
import HeaderBar from '../components/HeaderBar';
import { IncidentStatus } from '@/app/utils/IncidentStatus';
import { initialIncidents } from './data';
import { IncidentCard } from './Incident-card';
import { IncidentPriority } from '@/app/utils/IncidentPriority';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import Sidebar from '../SideBarComponent/SideBar';
import { IncidentService } from '@/app/service/IncidentService';
import { IncidentDetail } from '@/app/models/IncidentDetail';

const IncidentAssignment: React.FC = () => {
  const [incidents, setIncidents] = useState<IncidentDetail[]>([]);
  const [selectedIncident, setSelectedIncident] = useState<IncidentDetail | null>(null);
  const [assignee, setAssignee] = useState<string>("");
  const [searchTerm, setSearchTerm] = useState<string>("");
  const [showFilter, setShowFilter] = useState<boolean>(false);
  const [filterPriority, setFilterPriority] = useState<IncidentPriority | ''>('');
  const [filterDate, setFilterDate] = useState<string>("");
  const [isSortedByPriority, setIsSortedByPriority] = useState<boolean>(false);
  const [currentPage, setCurrentPage] = useState<number>(1);
  const incidentsPerPage = 3;

  const priorityValue = (p?: IncidentPriority): number => {
    if (p === IncidentPriority.ELEVEE) return 3;
    if (p === IncidentPriority.MOYENNE) return 2;
    if (p === IncidentPriority.FAIBLE) return 1;
    return 0;
  };

  const handleAssign = (incident: IncidentDetail) => {
    setSelectedIncident(incident);
    setAssignee(incident.coeDevSub || "");
  };

  /*const handleSortByPriority = () => {
    const sorted = [...incidents].sort((a, b) =>
      priorityValue(b.priorite) - priorityValue(a.priorite)
    );
    setIncidents(sorted);
    setIsSortedByPriority(true);
  };*/

  const handleFetchIncidents = async () => {
    try {
      const response = await IncidentService.getAllIncidents();
      setIncidents(response);
      console.log('Réponse incidents:', response);
    } catch (error) {
      console.error("Erreur lors de la récupération des incidents :", error);
      toast.error("Erreur lors de la récupération des incidents.");
    }
  };

  const handleSubmitAssignment = () => {
    if (selectedIncident && assignee.trim() !== "") {
      setIncidents(incidents.map(inc =>
        inc.id === selectedIncident.id ? { ...inc, assignedTo: assignee } : inc
      ));
      toast.success(`Incident "${selectedIncident.titre}" affecté à ${assignee} avec succès !`);
      setSelectedIncident(null);
      setAssignee("");
    } else {
      toast.error("Veuillez saisir un nom valide pour l'assigné.");
    }
  };

  const filteredIncidents = incidents
    .filter(i => i.statutIncident !== IncidentStatus.RESOLU)
    .filter(i =>
      (!filterPriority || i.priorite === filterPriority) &&
      (!searchTerm || i.titre.toLowerCase().includes(searchTerm.toLowerCase())) &&
      (!filterDate || new Date(i.dateDeclaration).toISOString().slice(0, 10) === filterDate)
    );

  const paginatedIncidents = filteredIncidents.slice(
    (currentPage - 1) * incidentsPerPage,
    currentPage * incidentsPerPage
  );

  const totalPages = Math.ceil(filteredIncidents.length / incidentsPerPage);

  // ✅ Appel initial à l'API
  useEffect(() => {
    handleFetchIncidents();
  }, []);

  return (
    <div className="min-h-screen flex flex-col -ml-11">
      <HeaderBar />
      <div className="flex flex-1">
        <div className="w-1/5">
          <Sidebar />
        </div>
        <div className="w-4/5 p-4 -ml-11">
          <div className="flex justify-between items-center mb-6">
            <div className="text-center w-full">
              <h2 className="text-4xl font-bold mb-1 -pl-2">Affectation des incidents</h2>
              <p className="text-gray-600 text-lg">Assignez les incidents aux membres de l'équipe</p>
            </div>
            <button className="bg-gray-200 px-4 py-2 rounded flex items-center space-x-2">
              <Download className="w-4 h-4" />
              <span>Exporter</span>
            </button>
          </div>

          {/* Barre de recherche et filtres */}
          <div className="flex space-x-4 mb-4 relative">
            <div className="relative flex items-center w-full">
              <Search className="absolute left-3 text-gray-500" size={20} />
              <input
                type="text"
                placeholder="Rechercher un incident..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-md text-base shadow-sm focus:outline-none focus:ring-2 focus:ring-green-500"
              />
            </div>
            <div className="ml-auto flex items-center space-x-4 relative">
              <button
              //  onClick={handleSortByPriority}
                className="flex items-center gap-2 px-3 py-3 ml-4 bg-white border border-gray-300 rounded-md shadow-sm hover:bg-gray-100 text-gray-700 text-lg font-medium"
              >
                <ArrowUpDown size={16} />
                Trier
              </button>
              <div className="relative">
                <button
                  onClick={() => setShowFilter(!showFilter)}
                  className="flex items-center gap-2 px-3 py-3 bg-white border border-green-600 rounded-md shadow-sm hover:bg-gray-100 text-green-600 text-lg font-medium"
                >
                  <SlidersHorizontal size={16} />
                  Filtres
                </button>
                {showFilter && (
                  <div className="absolute right-0 mt-2 w-64 bg-white p-4 border border-gray-300 rounded-md shadow-lg z-20">
                    <label className="block mb-2 text-sm font-medium text-gray-700">Priorité</label>
                    <select
                      value={filterPriority}
                      onChange={(e) => setFilterPriority(e.target.value as IncidentPriority)}
                      className="w-full p-2 mb-4 border border-gray-300 rounded-md"
                    >
                      <option value="">Toutes</option>
                      <option value={IncidentPriority.ELEVEE}>Élevée</option>
                      <option value={IncidentPriority.MOYENNE}>Moyenne</option>
                      <option value={IncidentPriority.FAIBLE}>Faible</option>
                    </select>

                    <label className="block mb-2 text-sm font-medium text-gray-700">Date de déclaration</label>
                    <input
                      type="date"
                      value={filterDate}
                      onChange={(e) => setFilterDate(e.target.value)}
                      className="w-full p-2 border border-gray-300 rounded-md"
                    />
                  </div>
                )}
              </div>
            </div>
          </div>

          {/* Liste des incidents */}
          <div className="ml-2 space-y-4">
            {paginatedIncidents.map((incident) => (
              <IncidentCard
                key={incident.id.toString()}
                incident={incident}
                onAssign={() => handleAssign(incident)}
              />
            ))}

            {/* Pagination */}
            <div className="flex justify-center space-x-4 mt-4">
              <button
                onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}
                disabled={currentPage === 1}
                className="px-4 py-2 bg-gray-200 rounded hover:bg-gray-300 disabled:opacity-50"
              >
                Précédent
              </button>
              <span className="px-4 py-2 text-gray-700 font-semibold">
                Page {currentPage} sur {totalPages}
              </span>
              <button
                onClick={() => setCurrentPage((prev) => Math.min(prev + 1, totalPages))}
                disabled={currentPage === totalPages}
                className="px-4 py-2 bg-gray-200 rounded hover:bg-gray-300 disabled:opacity-50"
              >
                Suivant
              </button>
            </div>
          </div>

          <ToastContainer />
        </div>
      </div>
    </div>
  );
};

export default IncidentAssignment;
import React, { useState } from "react";
import {
  User,
  FileText,
  CalendarDays,
  Wrench,
  Tag,
  AlertCircle,
  Cpu,
} from "lucide-react";
import { IncidentCardProps } from "@/app/utils/incidentCardProps";
import { IncidentPriority } from "@/app/utils/IncidentPriority";
import AssignIncident from "../create-incident/AssignIncident";

export const IncidentCard: React.FC<IncidentCardProps> = ({ incident, onAssign }) => {
  const [showMore, setShowMore] = useState(false);
  const [showAssign, setShowAssign] = useState(false);
  const [answers, setAnswers] = useState<{ [key: string]: string }>({});

  const handleAnswerChange = (questionId: string, value: string) => {
    setAnswers((prev) => ({ ...prev, [questionId]: value }));
  };

  const handleAssign = () => {
    setShowAssign(false);
    if (onAssign) onAssign();
  };

  // Fallback if incident is undefined
  if (!incident) {
    return <div className="p-6 text-red-600">Incident data is missing. Please provide an incident object.</div>;
  }

  return (
    <div className="border p-6 rounded-xl shadow-sm w-full bg-white mb-6 flex flex-col justify-between ml-13">
      <div className="flex-1">
       <h2 className="text-3xl font-semibold mb-4">
          #{incident.id.toString()} - {incident.titre}
        </h2>

        {/* Environnement, déclaré par, date de déclaration, priorité */}
        <div className="flex items-center text-base text-gray-600 mb-4 space-x-4">
          {incident.priorite && (
            <span className="flex items-center">
              <AlertCircle className="w-5 h-5 mr-2 text-red-600" />
              <span className="font-medium mr-2">Priorité :</span>
              <span
                className={`px-3 py-1 rounded-full text-sm ${
                  incident.priorite === IncidentPriority.ELEVEE
                    ? "bg-red-100 text-red-700"
                    : incident.priorite === IncidentPriority.MOYENNE
                    ? "bg-yellow-100 text-yellow-700"
                    : "bg-green-100 text-green-700"
                }`}
              >
                {incident.priorite}
              </span>
            </span>
          )}

          {incident.environnement && (
            <span className="flex items-center">
              <Cpu className="w-5 h-5 mr-2 text-purple-600" />
              {incident.environnement}
            </span>
          )}

          <span className="flex items-center">
            <User className="w-5 h-5 mr-2 text-blue-600" />
            Déclaré par : {incident.client_fullName || "Inconnu"}
          </span>
          <span className="flex items-center">
            <CalendarDays className="w-5 h-5 mr-2 text-green-600" />
            {incident.dateDeclaration
              ? incident.dateDeclaration.toLocaleDateString()
              : "Non spécifiée"}
          </span>

        </div>

        {/* Description */}
        <div className="flex items-start text-base text-gray-600 mb-4">
          <FileText className="w-5 h-5 mr-2 mt-1 text-gray-700" />
          <span className="flex-1">
            Description : {incident.description || "Aucune description fournie"}
          </span>
        </div>

        {showMore && (
          <>
            {incident.dateResolution&& (
              <div className="flex items-center text-base text-gray-600 mb-3">
                <CalendarDays className="w-5 h-5 mr-2 text-green-600" />
                Date de résolution : {incident.dateResolution.toLocaleDateString() || "Non spécifiée"}
              </div>
            )}
            <div className="flex items-center text-base text-gray-600 mb-3">
              <Wrench className="w-5 h-5 mr-2 text-orange-600" />
              Service impacté : {incident.application || "Non spécifié"}
            </div>
          </>
        )}
        {/* Bouton "Afficher plus / moins" */}
        <button
          onClick={() => setShowMore(!showMore)}
          className="mt-3 text-blue-600 hover:underline text-base font-medium"
        >
          {showMore ? "Afficher moins" : "Afficher plus"}
        </button>
      </div>

      {/* Bouton "Affecter" en rouge */}
      <div className="mt-6 flex justify-end">
        <button
          className="bg-red-600 text-white px-5 py-2 rounded hover:bg-red-700 text-base"
          onClick={() => setShowAssign(true)}
        >
          Affecter
        </button>
      </div>

      {showAssign && (
      <>
        {/* Overlay semi-transparent */}
        <div
          className="fixed inset-0 bg-black bg-opacity-50 z-40"
          onClick={() => setShowAssign(false)}
        />

    {/* Modal AssignIncident centré */}
        <div className="fixed inset-0 z-50 flex items-center justify-center">
          <div className="bg-white rounded-xl shadow-lg w-full max-w-2xl p-6 relative">
            {/* Bouton de fermeture */}
            <button
              className="absolute top-3 right-3 text-gray-500 hover:text-gray-700"
              onClick={() => setShowAssign(false)}
            >
              ✕
            </button>

            <AssignIncident
              answers={answers}
              onAnswerChange={handleAnswerChange}
              onAssign={handleAssign}
            />
          </div>
        </div>
      </>
)}

    </div>
  );
};
