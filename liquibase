import React, { useState, useEffect } from 'react';
import HeaderBar from '@/app/view/components/HeaderBar';
import KPIPage from './KPIPage';
import DashboardPage from './DashboardPage';
import { FaSearch } from 'react-icons/fa';
import Sidebar from '../SideBarComponent/SideBar';
import { IncidentPriority } from '@/app/utils/IncidentPriority';
import { ArrowUpDown, Search, SlidersHorizontal } from 'lucide-react';

const theme = {
  textPrimary: 'text-black',
  subtleText: 'text-gray-400',
  whiteContainer: 'bg-white rounded-lg p-4 shadow-md',
};

const MainDashboard = () => {
  const [searchTerm, setSearchTerm] = useState<string>('');
  const [showFilter, setShowFilter] = useState<boolean>(false);
  const [filterPriority, setFilterPriority] = useState<IncidentPriority | ''>('');
  const [filterDate, setFilterDate] = useState<string>('');
  const [filterEnvironment, setFilterEnvironment] = useState<string>('');
  const [filterClient, setFilterClient] = useState<string>('');
  const [isSortedByPriority, setIsSortedByPriority] = useState<boolean>(false);
  const [isLoading, setIsLoading] = useState(true);

  const priorityValue = (p?: IncidentPriority): number => {
    if (p === IncidentPriority.ELEVEE) return 3;
    if (p === IncidentPriority.MOYENNE) return 2;
    if (p === IncidentPriority.FAIBLE) return 1;
    return 0;
  };

  return (
    <div className="flex min-h-screen bg-white">
      <Sidebar />
      <div className="flex-1 ml-[48px] flex flex-col">
        <HeaderBar />
        <main className="flex-1 p-6 md:p-8 bg-gray-50 overflow-auto">
          <div className="text-center mb-8">
            <h2 className="text-xl md:text-2xl font-semibold text-black mb-1">Tableau de bord</h2>
            <h1 className="text-3xl md:text-4xl font-extrabold text-black">Suivi des incidents</h1>
          </div>

          <KPIPage />

          <div className="flex space-x-4 mb-4 relative">
            <div className="relative flex items-center w-full ml-52 mr-2 w-[calc(100vw-48px)]">
              <Search className="absolute left-3 text-gray-500" size={20} />
              <input
                type="text"
                placeholder="Rechercher un incident..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-9 pr-4 py-3 border border-gray-300 rounded-md text-base shadow-sm focus:outline-none focus:ring-2 focus:ring-black-500"
              />
            </div>
            <div className="ml-auto flex items-center space-x-4 relative">
              <button
                className="flex items-center gap-2 px-3 py-3 ml-4 bg-white border border-gray-300 rounded-md shadow-sm hover:bg-gray-100 text-gray-700 text-lg font-medium"
              >
                <ArrowUpDown size={16} />
                Trier
              </button>
              <div className="relative">
                <button
                  onClick={() => setShowFilter(!showFilter)}
                  className="flex items-center gap-2 px-3 py-3 bg-white border border-black-600 rounded-md shadow-sm hover:bg-gray-100 text-black-600 text-lg font-medium"
                >
                  <SlidersHorizontal size={16} />
                  Filtres
                </button>

                {showFilter && (
                  <div className="absolute right-0 mt-2 w-64 bg-white p-4 border border-gray-300 rounded-md shadow-lg z-20">
                    {/* Priorité */}
                    <label className="block mb-2 text-sm font-medium text-gray-700">Priorité</label>
                    <select
                      value={filterPriority}
                      onChange={(e) => setFilterPriority(e.target.value as IncidentPriority)}
                      className="w-full p-2 mb-4 border border-gray-300 rounded-md"
                    >
                      <option value="">Toutes</option>
                      <option value={IncidentPriority.ELEVEE}>Élevée</option>
                      <option value={IncidentPriority.MOYENNE}>Moyenne</option>
                      <option value={IncidentPriority.FAIBLE}>Faible</option>
                    </select>

                    {/* Date */}
                    <label className="block mb-2 text-sm font-medium text-gray-700">Date de déclaration</label>
                    <input
                      type="date"
                      value={filterDate}
                      onChange={(e) => setFilterDate(e.target.value)}
                      className="w-full p-2 mb-4 border border-gray-300 rounded-md"
                    />

                    {/* Environnement */}
                    <label className="block mb-2 text-sm font-medium text-gray-700">Environnement</label>
                    <select
                      value={filterEnvironment}
                      onChange={(e) => setFilterEnvironment(e.target.value)}
                      className="w-full p-2 mb-4 border border-gray-300 rounded-md"
                    >
                      <option value="">Tous</option>
                      <option value="production">Production</option>
                      <option value="préproduction">Préproduction</option>
                      <option value="développement">Développement</option>
                    </select>

                    {/* Use Client */}
                    <label className="block mb-2 text-sm font-medium text-gray-700">Use Client</label>
                    <select
                      value={filterClient}
                      onChange={(e) => setFilterClient(e.target.value)}
                      className="w-full p-2 mb-2 border border-gray-300 rounded-md"
                    >
                      <option value="">Tous</option>
                      <option value="ClientA">Client A</option>
                      <option value="ClientB">Client B</option>
                      <option value="ClientC">Client C</option>
                    </select>
                  </div>
                )}
              </div>
            </div>
          </div>

          <DashboardPage />
        </main>
      </div>
    </div>
  );
};

export default MainDashboard;
'use client';

import React from 'react';
import { FaBug, FaClock, FaTags, FaChartBar } from 'react-icons/fa';

const palette = {
  softBlue: '#bfdbfe',
  softOrange: '#fdba74',
  softGreen: '#bbf7d0',
  softPurple: '#ddd6fe',
  border: '#e5e7eb',
  text: '#1f2937',
  bgCard: '#f9fafb',
};

const theme = {
  shadow: 'shadow-sm hover:shadow-md transition-shadow duration-300',
};

const KPIPage = () => {
  const kpis = [
    { label: 'Incidents Déclarés', value: 150, color: palette.softBlue, icon: <FaBug /> },
    { label: 'Incidents en Cours de Résolution', value: 35, color: palette.softOrange, icon: <FaClock /> },
    { label: 'Temps Moyen de Résolution', value: '2 jours', color: palette.softGreen, icon: <FaTags /> },
    { label: 'Top DU Impacté', value: 'Bill Payment', color: palette.softPurple, icon: <FaChartBar /> },
  ];

  return (
    <div className="p-4 ml-52">
      <div className={`p-4 rounded-lg border border-[${palette.border}] bg-white`}>
        <h2 className="text-xl font-bold text-gray-800 mb-4">KPIs des Incidents</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          {kpis.map((kpi, index) => (
            <div
              key={index}
              className={`rounded-lg p-3 ${theme.shadow}`}
              style={{ backgroundColor: kpi.color }}
            >
              <div className="flex items-center gap-2 mb-1">
                <div className="text-xl text-gray-800">{kpi.icon}</div>
                <h3 className="text-base font-medium text-gray-900">{kpi.label}</h3>
              </div>
              <p className="text-lg font-semibold text-gray-800">{kpi.value}</p>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default KPIPage;
'use client';

import React, { useState, useEffect } from 'react';
import HeaderBar from '@/app/view/components/HeaderBar';
import KPIPage from './KPIPage';
import DashboardPage from './DashboardPage';
import { FaSearch } from 'react-icons/fa';
import Sidebar from '../SideBarComponent/SideBar';
import { IncidentPriority } from '@/app/utils/IncidentPriority';
import { ArrowUpDown, Search, SlidersHorizontal } from 'lucide-react';

const theme = {
  textPrimary: 'text-black',
  subtleText: 'text-gray-400',
  whiteContainer: 'bg-white rounded-lg p-4 shadow-md',
};

const MainDashboard = () => {
  
    const [searchTerm, setSearchTerm] = useState<string>("");
    const [showFilter, setShowFilter] = useState<boolean>(false);
    const [filterPriority, setFilterPriority] = useState<IncidentPriority | ''>('');
    const [filterDate, setFilterDate] = useState<string>("");
    const [isSortedByPriority, setIsSortedByPriority] = useState<boolean>(false);
     const [isLoading, setIsLoading] = useState(true);
  
    // Fonction pour obtenir la valeur numérique de la priorité (pour le tri)
    const priorityValue = (p?: IncidentPriority): number => {
      if (p === IncidentPriority.ELEVEE) return 3;
      if (p === IncidentPriority.MOYENNE) return 2;
      if (p === IncidentPriority.FAIBLE) return 1;
      return 0;
    };
 
  

  return (
    <div className="flex min-h-screen bg-white">
      {/* Sidebar fixée à gauche (48px) */}
      <Sidebar />

      {/* Contenu principal décalé à droite */}
      <div className="flex-1 ml-[48px] flex flex-col">
        <HeaderBar />

        <main className="flex-1 p-6 md:p-8 bg-gray-50 overflow-auto">
          {/* Titre */}
          <div className="text-center mb-8">
            <h2 className="text-xl md:text-2xl font-semibold text-black mb-1">Tableau de bord</h2>
            <h1 className="text-3xl md:text-4xl font-extrabold text-black">Suivi des incidents</h1>
          </div>

          {/* KPI */}
          <KPIPage />

          {/* Filtres */}
            <div className="flex space-x-4 mb-4 relative">
            <div className="relative flex items-center w-full  ml-52 w-[calc(100vw-48px)]">
              <Search className="absolute left-3  text-gray-500" size={20} />
              <input
                type="text"
                placeholder="Rechercher un incident..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-9 pr-4 py-3 border border-gray-300 rounded-md text-base shadow-sm focus:outline-none focus:ring-2 focus:ring-black-500"
              />
            </div>
            <div className="ml-auto flex items-center space-x-4 relative">
              <button
                className="flex items-center gap-2 px-3 py-3 ml-4 bg-white border border-gray-300 rounded-md shadow-sm hover:bg-gray-100 text-gray-700 text-lg font-medium"
              >
                <ArrowUpDown size={16} />
                Trier
              </button>
              <div className="relative">
                <button
                  onClick={() => setShowFilter(!showFilter)}
                  className="flex items-center gap-2 px-3 py-3 bg-white border border-black-600 rounded-md shadow-sm hover:bg-gray-100 text-black-600 text-lg font-medium"
                >
                  <SlidersHorizontal size={16} />
                  Filtres
                </button>

                {showFilter && (
                  <div className="absolute right-0 mt-2 w-64 bg-white p-4 border border-gray-300 rounded-md shadow-lg z-20">
                    <label className="block mb-2 text-sm font-medium text-gray-700">Priorité</label>
                    <select
                      value={filterPriority}
                      onChange={(e) => setFilterPriority(e.target.value as IncidentPriority)}
                      className="w-full p-2 mb-4 border border-gray-300 rounded-md"
                    >
                      <option value="">Toutes</option>
                      <option value={IncidentPriority.ELEVEE}>Élevée</option>
                      <option value={IncidentPriority.MOYENNE}>Moyenne</option>
                      <option value={IncidentPriority.FAIBLE}>Faible</option>
                    </select>

                    <label className="block mb-2 text-sm font-medium text-gray-700">Date de déclaration</label>
                    <input
                      type="date"
                      value={filterDate}
                      onChange={(e) => setFilterDate(e.target.value)}
                      className="w-full p-2 border border-gray-300 rounded-md"
                    />
                  </div>
                )}
              </div>
            </div>
          </div>

          {/* Dashboard avec graphes élargis */}
          <DashboardPage />
        </main>
      </div>
    </div>
  );
};

export default MainDashboard;
