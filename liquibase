import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

@Repository
public class IncidentRepositoryImpl implements IncidentRepository {

    private final IncidentJpaRepository incidentJpaRepo;

    @Autowired
    public IncidentRepositoryImpl(IncidentJpaRepository incidentJpaRepo) {
        this.incidentJpaRepo = incidentJpaRepo;
    }

    @Override
    @Transactional(readOnly = true)
    public List<IncidentResponse> getAllIncidents() {
        return incidentJpaRepo.findAll().stream()
            .map(incidentEntity -> {
                IncidentResponse incidentResponse = new IncidentResponse();
                incidentResponse.setPriorite(incidentEntity.getPriorite() != null ? incidentEntity.getPriorite().name() : null);
                incidentResponse.setDateAttribution(incidentEntity.getDateAttribution());
                incidentResponse.setDateResolution(incidentEntity.getDateResolution());
                incidentResponse.setServiceId(incidentEntity.getService() != null ? incidentEntity.getService().getId() : null);
                incidentResponse.setDateDeclaration(incidentEntity.getDateDeclaration());

                // Récupérer les informations du client directement (déjà chargé via JOIN FETCH)
                if (incidentEntity.getClient() != null) {
                    incidentResponse.setClientSub(incidentEntity.getClient().getSub());
                    incidentResponse.setClientFirstName(incidentEntity.getClient().getFirstName());
                    incidentResponse.setClientLastName(incidentEntity.getClient().getLastName());
                    incidentResponse.setClientFullName(incidentEntity.getClient().getFullName());
                    incidentResponse.setClientIgg(incidentEntity.getClient().getIgg());
                    incidentResponse.setClientRole(incidentEntity.getClient().getRoles() != null ? incidentEntity.getClient().getRoles() : Set.of());
                    incidentResponse.setClientMail(incidentEntity.getClient().getMail());
                    incidentResponse.setClientServiceName(incidentEntity.getClient().getServiceName());
                }

                // Récupérer les informations du coeDev directement (déjà chargé via JOIN FETCH)
                if (incidentEntity.getCoeDev() != null) {
                    incidentResponse.setCoeDevSub(incidentEntity.getCoeDev().getSub());
                    incidentResponse.setCoeDevFirstName(incidentEntity.getCoeDev().getFirstName());
                    incidentResponse.setCoeDevLastName(incidentEntity.getCoeDev().getLastName());
                    incidentResponse.setCoeDevFullName(incidentEntity.getCoeDev().getFullName());
                    incidentResponse.setCoeDevIgg(incidentEntity.getCoeDev().getIgg());
                    incidentResponse.setCoeDevRole(incidentEntity.getCoeDev().getRoles() != null ? incidentEntity.getCoeDev().getRoles() : Set.of());
                    incidentResponse.setCoeDevMail(incidentEntity.getCoeDev().getMail());
                    incidentResponse.setCoeDevServiceName(incidentEntity.getCoeDev().getServiceName());
                }

                return incidentResponse;
            }).collect(Collectors.toList());
    }
}

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import java.util.List;

public interface IncidentJpaRepository extends JpaRepository<IncidentEntity, Long> {
    @Query("SELECT i FROM IncidentEntity i JOIN FETCH i.client JOIN FETCH i.coeDev")
    List<IncidentEntity> findAll();
}
