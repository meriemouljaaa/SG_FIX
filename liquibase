 return (
    <div className="flex bg-gray-50 min-h-screen text-[17px]">
      <Sidebar />
      <div className="flex-1 flex flex-col">
        <HeaderBar />
        <main className="p-6 max-w-[100%] mx-auto w-full relative">
          <h1 className="text-4xl font-bold text-center text-gray-800 mb-4">
            Historique des incidents
          </h1>
          <div className="flex space-x-4 mb-4 relative ml-52 max-w-[80%]">
            <div className="relative flex items-center w-full">
              <Search className="absolute left-3 text-gray-500" size={20} />
              <input
                type="text"
                placeholder="Rechercher un incident..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-md text-base shadow-sm focus:outline-none focus:ring-2 focus:ring-green-500"
              />
            </div>
            <div className="ml-auto flex items-center space-x-4 relative">
              <button
                className="flex items-center gap-2 px-3 py-3 ml-4 bg-white border border-gray-300 rounded-md shadow-sm hover:bg-gray-100 text-gray-700 text-lg font-medium"
                onClick={() => setSortPriority(sortPriority ? "" : "asc")}
              >
                <ArrowUpDown size={16} />
                Trier
              </button>
              <div className="relative">
                <button
                  onClick={() => setShowFilter(!showFilter)}
                  className="flex items-center gap-2 px-3 py-3 bg-white border border-black-600 rounded-md shadow-sm hover:bg-gray-100 text-black-600 text-lg font-medium"
                >
                  <SlidersHorizontal size={16} />
                  Filtres
                </button>

                {showFilter && (
                  <div className="absolute right-0 mt-2 w-64 bg-white p-4 border border-gray-300 rounded-md shadow-lg z-20">
                    <label className="block mb-2 text-sm font-medium text-gray-700">
                      Statut
                    </label>
                    <select
                      value={filterStatus}
                      onChange={(e) => setFilterStatus(e.target.value)}
                      className="w-full p-2 mb-4 border border-gray-300 rounded-md"
                    >
                      <option value="">Tous</option>
                      {Object.values(IncidentStatus).map((status) => (
                        <option key={status} value={status}>
                          {statusLabels[status] || status}
                        </option>
                      ))}
                    </select>

                    <label className="block mb-2 text-sm font-medium text-gray-700">
                      Priorité
                    </label>
                    <select
                      value={filterPriority}
                      onChange={(e) => setFilterPriority(e.target.value as IncidentPriority)}
                      className="w-full p-2 mb-4 border border-gray-300 rounded-md"
                    >
                      <option value="">Toutes</option>
                      <option value={IncidentPriority.ELEVEE}>Élevée</option>
                      <option value={IncidentPriority.MOYENNE}>Moyenne</option>
                      <option value={IncidentPriority.FAIBLE}>Faible</option>
                    </select>

                    <button
                      onClick={applyFilters}
                      className="w-full px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600"
                    >
                      Appliquer
                    </button>
                  </div>
                )}
              </div>
            </div>
          </div>
          <div className="bg-white rounded-xl shadow overflow-x-auto ml-52 max-w-[80%]">
            <table className="min-w-full text-left text-gray-700 text-[16px]">
              <thead className="bg-gray-100 text-sm uppercase">
                <tr>
                  <th className="px-6 py-3">
                    <span className="inline-block align-middle">
                      <ListOrdered className="w-4 h-4 inline-block mr-2 align-middle" />
                      ID
                    </span>
                  </th>
                  <th className="px-6 py-3">
                    <span className="inline-block align-middle">
                      <FileText className="w-4 h-4 inline-block mr-2 align-middle" />
                      Titre
                    </span>
                  </th>
                  <th className="px-6 py-3">
                    <span className="inline-block align-middle">
                      <Circle className="w-4 h-4 inline-block mr-2 align-middle" />
                      Statut
                    </span>
                  </th>
                  <th className="px-6 py-3">
                    <span className="inline-block align-middle">
                      <AlertTriangle className="w-4 h-4 inline-block mr-2 align-middle" />
                      Priorité
                    </span>
                  </th>
                  <th className="px-6 py-3">
                    <span className="inline-block align-middle">
                      <AlertTriangle className="w-4 h-4 inline-block mr-2 align-middle" />
                      Gravité
                    </span>
                  </th>
                  <th className="px-6 py-3">
                    <span className="inline-block align-middle">
                      <Cpu className="w-4 h-4 inline-block mr-2 align-middle" />
                      Application
                    </span>
                  </th>
                  <th className="px-6 py-3">
                    <span className="inline-block align-middle">
                      <User className="w-4 h-4 inline-block mr-2 align-middle" />
                      Déclaré par
                    </span>
                  </th>
                  <th className="px-6 py-3">
                    <span className="inline-block align-middle">
                      <CalendarDays className="w-4 h-4 inline-block mr-2 align-middle" />
                      Date
                    </span>
                  </th>
                </tr>
              </thead>
              <tbody>
                {paginatedIncidents.map((incident) => (
                  <tr
                    key={incident.id.toString()}
                    className="hover:bg-gray-50 cursor-pointer border-b"
                    onClick={() => setSelectedIncident(incident)}
                  >
                    <td className="px-6 py-4 font-medium">{incident.id.toString()}</td>
                    <td className="px-6 py-4">{incident.titre}</td>
                    <td className="px-6 py-4">
                      <span
                        className={`inline-flex items-center gap-2 px-2 py-1 rounded-full text-sm font-medium ${getStatusStyle(
                          incident.statutIncident
                        )}`}
                      >
                        {statusLabels[incident.statutIncident] || incident.statutIncident}
                      </span>
                    </td>
                    <td className="px-6 py-4">
                      <span
                        className={`px-3 py-1 text-sm font-medium rounded-full ${getPriorityStyle(
                          incident.priorite
                        )}`}
                      >
                        {incident.priorite}
                      </span>
                    </td>
                    <td className="px-6 py-4">
                      <span
                        className={`px-3 py-1 text-sm font-medium rounded-full ${getGravityStyle(
                          incident.gravite
                        )}`}
                      >
                        {incident.gravite}
                      </span>
                    </td>
                    <td className="px-6 py-4">{incident.application}</td>
                    <td className="px-6 py-4">{incident.client_fullName}</td>
                    <td className="px-6 py-4">{incident.dateDeclaration}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
          <div className="flex justify-between items-center mt-6 ml-8 max-w-[80%]">
            <button
              onClick={() => setPage((prev) => Math.max(prev - 1, 1))}
              disabled={page === 1}
              className={`flex items-center gap-2 px-4 py-2 border rounded ${
                page === 1
                  ? "bg-gray-100 text-gray-400 cursor-not-allowed"
                  : "bg-white text-gray-700 hover:bg-gray-50"
              }`}
            >
              <ChevronLeft className="w-4 h-4" />
              Précédent
            </button>
            <span className="text-gray-700">Page {page} sur {totalPages}</span>
            <button
              onClick={() => setPage((prev) => Math.min(prev + 1, totalPages))}
              disabled={page === totalPages}
              className={`flex items-center gap-2 px-4 py-2 border rounded ${
                page === totalPages
                  ? "bg-gray-100 text-gray-400 cursor-not-allowed"
                  : "bg-white text-gray-700 hover:bg-gray-50"
              }`}
            >
              Suivant
              <ChevronRight className="w-4 h-4" />
            </button>
          </div>
          {selectedIncident && (
            <HistoriquePopup
              incident={selectedIncident}
              onClose={() => setSelectedIncident(null)}
            />
          )}
        </main>
      </div>
    </div>
  );
