public void createIncident(IncidentDTO incidentDto) {
    // Sauvegarde en base
    incidentRepository.save(mapToEntity(incidentDto));

    // Ensuite, broadcast aux abonnés SSE
    for (SseEmitter emitter : emitters) {
        try {
            emitter.send(SseEmitter.event()
                .name("incident")
                .data(incidentDto, MediaType.APPLICATION_JSON));
        } catch (IOException e) {
            emitter.complete();
            emitters.remove(emitter);
        }
    }
}
@PostMapping("/dispatchEvent")
public void dispatchEvent(@RequestBody IncidentDTO incident) {
    for (SseEmitter emitter : emitters) {
        try {
            emitter.send(SseEmitter.event()
                .name("incident")
                .data(incident, MediaType.APPLICATION_JSON));
        } catch (IOException e) {
            emitter.complete();
            emitters.remove(emitter);
        }
    }
}
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.method.annotation.SseEmitter;

import java.io.IOException;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;

@RestController
@RequestMapping("/api/sse")
public class SseController {

    // Stocke les clients connectés
    private final List<SseEmitter> emitters = new CopyOnWriteArrayList<>();

    @GetMapping("/subscribe")
    public SseEmitter subscribe() {
        SseEmitter emitter = new SseEmitter(0L); // Pas de timeout
        emitters.add(emitter);

        emitter.onCompletion(() -> emitters.remove(emitter));
        emitter.onTimeout(() -> emitters.remove(emitter));
        emitter.onError(e -> emitters.remove(emitter));

        // Optionnel : envoyer un message de bienvenue/test
        try {
            emitter.send(SseEmitter.event().name("connected").data("Connecté au flux SSE"));
        } catch (IOException e) {
            emitter.completeWithError(e);
        }

        return emitter;
    }

    // Méthode à appeler depuis ton service de création d'incident
    public void sendIncidentToClients(Object incidentData) {
        for (SseEmitter emitter : emitters) {
            try {
                emitter.send(SseEmitter.event()
                        .name("incident")
                        .data(incidentData));
            } catch (IOException e) {
                emitter.complete();
                emitters.remove(emitter);
            }
        }
    }
}
