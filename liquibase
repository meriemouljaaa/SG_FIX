'use client';

import { useEffect } from 'react';
import { useSearchParams, useRouter } from 'next/navigation';
import AppManager from '@/app/utils/AppManager';

const CallbackPage = () => {
  const searchParams = useSearchParams();
  const router = useRouter();

  useEffect(() => {
    const code = searchParams.get('code');
    const state = searchParams.get('state');
    const error = searchParams.get('error');

    console.log('üîÅ Params from redirect:');
    console.log('code:', code);
    console.log('state:', state);
    console.log('error:', error);

    if (code) {
      AppManager.exchangeCodeForToken(code)
        .then(() => {
          const user = AppManager.getDecodedToken();
          console.log('‚úÖ Decoded user:', user);
          router.push('/core/homePage'); // Rediriger apr√®s login
        })
        .catch((err) => {
          console.error('‚ùå Error exchanging code for token:', err);
        });
    }
  }, [searchParams]);

  return <div className="p-8 text-center">Authenticating...</div>;
};

export default CallbackPage;

// utils/AppManager.ts
import jwtDecode from 'jwt-decode';

function base64urlencode(buffer: Uint8Array): string {
    return btoa(String.fromCharCode(...Array.from(buffer)))
        .replace(/\+/g, '-').replace(/\//g, '_').replace(/=+$/, '');
}

async function generateCodeChallenge(verifier: string): Promise<string> {
    const encoder = new TextEncoder();
    const data = encoder.encode(verifier);
    const digest = await crypto.subtle.digest('SHA-256', data);
    return base64urlencode(new Uint8Array(digest));
}

const AppManager = {
    async authorize(): Promise<void> {
        const clientId = process.env.NEXT_PUBLIC_SG_CLIENT_ID!;
        const redirectUri = process.env.NEXT_PUBLIC_SG_REDIRECT_URI!;
        const scope = 'openid profile email';

        const codeVerifier = Array(128)
            .fill(0)
            .map(() => Math.random().toString(36)[2])
            .join('');
        const codeChallenge = await generateCodeChallenge(codeVerifier);

        sessionStorage.setItem('pkce_verifier', codeVerifier);

        const url = new URL('https://auth.societe.com/oauth2/authorize');
        url.searchParams.set('client_id', clientId);
        url.searchParams.set('response_type', 'code');
        url.searchParams.set('redirect_uri', redirectUri);
        url.searchParams.set('scope', scope);
        url.searchParams.set('code_challenge', codeChallenge);
        url.searchParams.set('code_challenge_method', 'S256');

        window.location.href = url.toString();
    },

    async exchangeCodeForToken(code: string) {
        const codeVerifier = sessionStorage.getItem('pkce_verifier')!;
        const clientId = process.env.NEXT_PUBLIC_SG_CLIENT_ID!;
        const redirectUri = process.env.NEXT_PUBLIC_SG_REDIRECT_URI!;

        const response = await fetch('https://auth.societe.com/oauth2/token', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: new URLSearchParams({
                grant_type: 'authorization_code',
                code,
                redirect_uri: redirectUri,
                client_id: clientId,
                code_verifier: codeVerifier,
            }),
        });

        const data = await response.json();
        if (!response.ok) throw new Error(data.error_description || 'Token exchange failed');

        sessionStorage.setItem('access_token', data.access_token);
        return data;
    },

    getDecodedToken(): any {
        const token = sessionStorage.getItem('access_token');
        if (!token) return null;
        return jwtDecode(token);
    }
};

export default AppManager;


'use client';

import React, { useState } from 'react';
import AppManager from '@/app/utils/AppManager';

const SignUpForm = () => {
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');

    const handleOAuthLogin = async () => {
        try {
            await AppManager.authorize();
        } catch (error) {
            console.error('OAuth login failed:', error);
        }
    };

    return (
        <div className="flex flex-col gap-4 w-full max-w-md mx-auto mt-16 p-4 bg-white rounded shadow">
            <h2 className="text-xl font-bold text-center">Sign In with SGConnect</h2>

            <input
                type="email"
                placeholder="Email"
                className="border rounded px-4 py-2"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
            />
            <input
                type="password"
                placeholder="Password"
                className="border rounded px-4 py-2"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
            />

            <button
                className="bg-blue-600 text-white px-4 py-2 rounded"
                onClick={handleOAuthLogin}
            >
                Sign In with SGConnect
            </button>
        </div>
    );
};

export default SignUpForm;




'use client';

import { useEffect } from 'react';
import { useSearchParams, useRouter } from 'next/navigation';
import AppManager from '@/app/utils/AppManager';

const CallbackPage = () => {
    const searchParams = useSearchParams();
    const router = useRouter();

    useEffect(() => {
        const code = searchParams.get('code');

        if (code) {
            console.log('Received code:', code);
            AppManager.exchangeCodeForToken(code)
                .then(() => {
                    const user = AppManager.getDecodedToken();
                    console.log('Authenticated user:', user);
                    router.push('/core/homePage');
                })
                .catch((err) => {
                    console.error('Failed to exchange code:', err);
                });
        }
    }, [searchParams]);

    return <div className="text-center mt-10 text-xl">Authenticating...</div>;
};

export default CallbackPage;


NEXT_PUBLIC_SG_CLIENT_ID=your_client_id
NEXT_PUBLIC_SG_REDIRECT_URI=http://localhost:3000/callback

