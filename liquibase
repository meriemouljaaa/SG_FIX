"use client";
import React, { useEffect, useState } from "react";

const tabs = [
  { label: "All", count: 0 },
  { label: "Searcheye Ai", count: 0 },
  { label: "System", count: 0 },
];

interface Notification {
  id: number;
  name: string;
  action: string;
  campaign?: string;
  time: string;
  link?: string;
  avatar: string;
}

const NotificationPanel = () => {
  const [activeTab, setActiveTab] = useState("All");
  const [notifications, setNotifications] = useState<Notification[]>([]);

  useEffect(() => {
    const eventSource = new EventSource("http://localhost:8080/subscribe");

    eventSource.onmessage = (event) => {
      // Ne traite que les événements personnalisés
      const data = JSON.parse(event.data);
      const newNotification: Notification = {
        id: Date.now(),
        name: data.name || "Système",
        action: data.action || "a envoyé une notification",
        campaign: data.campaign || "",
        time: new Date().toLocaleTimeString(),
        link: data.link || "",
        avatar: data.avatar || "https://randomuser.me/api/portraits/lego/2.jpg",
      };
      setNotifications((prev) => [newNotification, ...prev]);
    };

    eventSource.addEventListener("latestNews", (event) => {
      try {
        const data = JSON.parse((event as MessageEvent).data);
        const newNotification: Notification = {
          id: Date.now(),
          name: data.name || "Système",
          action: data.action || "a envoyé une notification",
          campaign: data.campaign || "",
          time: new Date().toLocaleTimeString(),
          link: data.link || "",
          avatar: data.avatar || "https://randomuser.me/api/portraits/lego/2.jpg",
        };
        setNotifications((prev) => [newNotification, ...prev]);
      } catch (e) {
        console.error("Erreur parsing SSE:", e);
      }
    });

    eventSource.onerror = (err) => {
      console.error("SSE error:", err);
      eventSource.close();
    };

    return () => eventSource.close();
  }, []);

  return (
    <div className="bg-white rounded-xl shadow-md w-[350px] p-4">
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-lg font-semibold">Notifications</h2>
        <button className="text-gray-400 hover:text-gray-600">⟳</button>
      </div>

      <div className="flex space-x-2 text-sm mb-4">
        {tabs.map((tab) => (
          <button
            key={tab.label}
            className={`px-2 py-1 rounded-full border ${
              activeTab === tab.label
                ? "bg-gray-200 border-gray-400"
                : "text-gray-600 border-gray-200"
            }`}
            onClick={() => setActiveTab(tab.label)}
          >
            {tab.label} <span className="ml-1 text-xs text-gray-500">{notifications.length}</span>
          </button>
        ))}
      </div>

      <div className="space-y-3 max-h-[400px] overflow-y-auto">
        {notifications.map((n) => (
          <div
            key={n.id}
            className="flex items-start space-x-3 p-2 bg-gray-50 hover:bg-gray-100 rounded-md"
          >
            <img
              src={n.avatar}
              alt={n.name}
              className="w-10 h-10 rounded-full object-cover"
            />
            <div>
              <p className="text-sm">
                <strong>{n.name}</strong> {n.action}{" "}
                {n.campaign && <strong>{n.campaign}</strong>}
              </p>
              {n.link && (
                <a href="#" className="text-xs text-blue-500">
                  {n.link}
                </a>
              )}
              <p className="text-xs text-gray-400">{n.time}</p>
            </div>
          </div>
        ))}
      </div>

      <div className="mt-4 flex justify-between text-sm">
        <button className="text-blue-600 hover:underline">Mark all as read</button>
        <button className="text-blue-600 hover:underline">Go to notification center</button>
      </div>
    </div>
  );
};

export default NotificationPanel;
