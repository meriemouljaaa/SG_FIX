package ton.package.service;

import ton.package.entity.IncidentEntity;
import ton.package.repository.IncidentRepository;
import ton.package.model.CreateIncidentRequest;

import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.List;
import java.util.Optional;

@Service
public class IncidentService {

    private final IncidentRepository incidentRepository;

    @Autowired
    public IncidentService(IncidentRepository incidentRepository) {
        this.incidentRepository = incidentRepository;
    }

    public List<IncidentEntity> getAllIncidents() {
        return incidentRepository.findAll();
    }

    public Optional<IncidentEntity> getIncidentById(Integer id) {
        return incidentRepository.findById(id);
    }

    public IncidentEntity createIncident(CreateIncidentRequest request) {
        IncidentEntity incident = new IncidentEntity();
        incident.setTitre(request.getTitre());
        incident.setDescription(request.getDescription());
        incident.setStatut(request.getStatutIncident() != null ? StatutIncident.valueOf(request.getStatutIncident()) : null);
        incident.setGravite(request.getGravite() != null ? GraviteIncident.valueOf(request.getGravite()) : null);
        incident.setPriorite(request.getPriorite() != null ? PrioriteIncident.valueOf(request.getPriorite()) : null);
        incident.setDateAttribution(request.getDateAttribution());
        incident.setDateResolution(request.getDateResolution());
        incident.setFichierJoint(request.getFichierJoint());
        
        // Ici pour le service associé, il faudra aller chercher le service à partir de son ID
        if (request.getServiceId() != null) {
            ServiceEntity service = new ServiceEntity();
            service.setId(request.getServiceId()); // Supposant qu'il y a un setId
            incident.setService(service);
        }

        return incidentRepository.save(incident);
    }

    public void deleteIncident(Integer id) {
        incidentRepository.deleteById(id);
    }
}
