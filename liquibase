'use client';
import React, { useState, useEffect } from 'react';
import HeaderBar from '@/app/view/components/HeaderBar';
import { Search, ArrowUpDown, SlidersHorizontal } from 'lucide-react';
import { Incident } from '@/app/utils/Incidents';
import { IncidentPriority, getPriorityStyle } from '@/app/utils/IncidentPriority';
import { IncidentService } from '@/app/service/IncidentService';
import { IncidentDetail } from '@/app/models/IncidentDetail';
import Sidebar from '../SideBarComponent/SideBar';

export default function IncidentsEnCoursDeTraitement() {
    const [searchTerm, setSearchTerm] = useState('');
    const [sortPriority, setSortPriority] = useState<'asc' | 'desc' | ''>('');
    const [priorityFilter, setPriorityFilter] = useState<string | ''>('');
    const [showFilter, setShowFilter] = useState<boolean>(false);
    const [selectedIncident, setSelectedIncident] = useState<IncidentDetail | null>(null);
    const [incidents, setIncidents] = useState<Incident[]>([]);
    const [incidentDetails, setIncidentDetails] = useState<IncidentDetail[]>([]);
    const [loading, setLoading] = useState<boolean>(true);
    const [error, setError] = useState<string | null>(null);
    const [igg, setIgg] = useState<string | null>(null);

    useEffect(() => {
        if (typeof window !== 'undefined') {
            const storedIgg = localStorage.getItem('igg');
            setIgg(storedIgg);
        }
    }, []);

    useEffect(() => {
        const fetchIncidents = async (iggValue: string) => {
            try {
                setLoading(true);
                const data = await IncidentService.findMyIncidents(iggValue);
                setIncidentDetails(data);
                const mappedIncidents: Incident[] = data.map((detail: IncidentDetail) => ({
                    id: detail.id,
                    title: detail.titre,
                    description: detail.description,
                    status: detail.statutIncident,
                    priorité: detail.priorite,
                    declarationDate: detail.dateDeclaration,
                    affectedService: detail.client_serviceName,
                    environment: detail.environnement,
                    declaredBy: detail.client_fullName,
                    assignedTo: detail.coeDev_fullName || 'Non assigné',
                }));
                setIncidents(mappedIncidents);
            } catch (err) {
                setError('Erreur lors du chargement des incidents');
            } finally {
                setLoading(false);
            }
        };

        if (igg) {
            fetchIncidents(igg);
        } else if (igg === null) {
            console.log('En attente de IGG dans localStorage');
        } else {
            setError('IGG non trouvé dans le stockage local');
            setLoading(false);
        }
    }, [igg]);

    const resetFilters = () => {
        setSearchTerm('');
        setSortPriority('');
        setPriorityFilter('');
    };

    if (loading) {
        return (
            <div className="flex bg-gray-50 min-h-screen text-[17px] relative">
                <Sidebar />
                <div className="flex-1 flex flex-col">
                    <HeaderBar />
                    <main className="p-6 max-w-7xl mx-auto w-full">
                        <p className="text-center text-gray-500">Chargement...</p>
                    </main>
                </div>
            </div>
        );
    }

    if (error) {
        return (
            <div className="flex bg-gray-50 min-h-screen text-[17px] relative">
                <Sidebar />
                <div className="flex-1 flex flex-col">
                    <HeaderBar />
                    <main className="p-6 max-w-7xl mx-auto w-full">
                        <p className="text-center text-red-500">{error}</p>
                        <div className="mt-4 max-w-md mx-auto">
                            <input
                                type="text"
                                placeholder="Entrez l'IGG"
                                onChange={(e) => {
                                    const newIgg = e.target.value;
                                    setIgg(newIgg);
                                    if (typeof window !== 'undefined' && newIgg) {
                                        localStorage.setItem('igg', newIgg);
                                        setError(null);
                                    }
                                }}
                                className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-md text-base shadow-sm focus:outline-none focus:ring-2 focus:ring-green-500"
                            />
                        </div>
                    </main>
                </div>
            </div>
        );
    }

    return (
        <div className="flex bg-gray-50 min-h-screen text-[17px] relative">
            <Sidebar />
            <div className="flex-1 flex flex-col">
                <HeaderBar />
                <main className="p-6 max-w-7xl mx-auto w-full">
                    <h1 className="text-4xl font-bold text-gray-800 mb-8 text-center">
                        Tous les Incidents
                    </h1>

                    <div className="grid grid-cols-1 gap-4">
                        {incidents.map((incident) => {
                            const detail = incidentDetails.find((d) => d.id === incident.id);
                            return (
                                <div
                                    key={incident.id}
                                    className="border rounded-lg p-4 bg-white shadow-sm cursor-pointer hover:shadow-md transition"
                                    onClick={() => setSelectedIncident(detail || null)}
                                >
                                    <div className="flex justify-between items-center">
                                        <h2 className="text-xl font-semibold">{incident.title}</h2>
                                        <span className={`px-2 py-1 text-sm rounded ${getPriorityStyle(incident.priorité as IncidentPriority)}`}>
                                            {incident.priorité}
                                        </span>
                                    </div>
                                    <p className="text-gray-600 mt-2">{incident.description}</p>
                                    <p className="text-sm text-gray-500 mt-1">
                                        Déclaré par {incident.declaredBy} | {incident.declarationDate}
                                    </p>
                                </div>
                            );
                        })}
                    </div>
                </main>
            </div>
        </div>
    );
}
