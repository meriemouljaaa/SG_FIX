"use client";

import { useState } from "react";
import { Check, X } from "lucide-react";
import clsx from "clsx";

interface Notification {
  id: number;
  user: string;
  action: string;
  target: string;
  time: string;
  avatar?: string;
  buttons?: boolean;
  file?: string;
  message?: string;
}

const notifications: Notification[] = [
  {
    id: 1,
    user: "Anna Szrand",
    action: "joined to ðŸ”¥",
    target: "Final Presentation",
    time: "2h ago",
    avatar: "",
  },
  {
    id: 2,
    user: "Jess Raddon",
    action: "mention you in ðŸŽ¾",
    target: "Tennis List",
    time: "4h ago",
  },
  {
    id: 3,
    user: "Sandra Marx",
    action: "is requesting to upgrade Plan",
    target: "",
    time: "12h ago",
    avatar: "",
    buttons: true,
  },
  {
    id: 4,
    user: "Adam Smith",
    action: "upload a file",
    target: "",
    time: "1d ago",
    file: "landing_page_ver2.fig",
  },
  {
    id: 5,
    user: "Ralpg Turner",
    action: "edited ðŸŽ¯",
    target: "Celebrate Info",
    time: "1d ago",
    message: "Let's add it to the main secret documentary ðŸ“„",
  },
  {
    id: 6,
    user: "Dan Merix",
    action: "is requesting to upgrade Plan",
    target: "",
    time: "12h ago",
    buttons: true,
  },
];

// Fonction pour obtenir les initiales
const getInitials = (fullName: string): string => {
  const parts = fullName.trim().split(" ");
  const initials = parts.map((p) => p[0].toUpperCase());
  return (initials[0] || "") + (initials[1] || "");
};

export default function Notifications() {
  const [selected, setSelected] = useState<"all" | "following" | "archive">("all");

  return (
    <div className="w-full rounded-xl bg-white shadow-xl p-4">
      <div className="flex items-center justify-between mb-4">
        <h2 className="text-lg font-semibold">Notifications</h2>
        <button className="text-sm text-blue-600 hover:underline">Mark all as read</button>
      </div>

      <div className="flex gap-4 border-b mb-4 pb-2 text-sm font-medium">
        {["all", "following", "archive"].map((tab) => (
          <button
            key={tab}
            onClick={() => setSelected(tab as any)}
            className={clsx(
              "capitalize",
              selected === tab ? "border-b-2 border-black" : "text-gray-400"
            )}
          >
            {tab} {tab === "all" ? `(${notifications.length})` : ""}
          </button>
        ))}
      </div>

      <div className="space-y-4 max-h-[70vh] overflow-y-auto pr-2">
        {notifications.map((notif) => (
          <div key={notif.id} className="flex items-start gap-3">
            {notif.avatar ? (
              <img
                src={notif.avatar}
                className="w-10 h-10 rounded-full object-cover"
                alt={notif.user}
              />
            ) : (
              <div className="w-10 h-10 rounded-full bg-gray-500 text-white flex items-center justify-center text-sm font-semibold">
                {getInitials(notif.user)}
              </div>
            )}

            <div className="flex-1">
              <p className="text-sm">
                <span className="font-medium">{notif.user}</span> {notif.action}{" "}
                <span className="text-blue-600 font-medium">{notif.target}</span>
              </p>
              <p className="text-xs text-gray-500">{notif.time}</p>

              {notif.message && (
                <p className="mt-1 text-sm text-gray-700">{notif.message}</p>
              )}

              {notif.file && (
                <div className="mt-1 text-sm text-blue-600 underline cursor-pointer">
                  ðŸ“Ž {notif.file}
                </div>
              )}

              {notif.buttons && (
                <div className="flex gap-2 mt-2">
                  <button className="px-3 py-1 text-sm bg-black text-white rounded-lg">Accept</button>
                  <button className="px-3 py-1 text-sm border border-gray-300 rounded-lg">Decline</button>
                </div>
              )}
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}

"use client";

import { useState, useRef, useEffect } from "react";
import { Bell, LogOut } from "lucide-react";
import Image from "next/image";
import { useRouter } from "next/navigation";
import Notifications from "../notification-user/notificationuser";

const HeaderBar = () => {
  const router = useRouter();
  const [openUserMenu, setOpenUserMenu] = useState(false);
  const [openNotifMenu, setOpenNotifMenu] = useState(false);
  const menuRef = useRef<HTMLDivElement>(null);
  const hasNotification = true;

  const user = {
    name: "Omar Bari",
    email: "omar.bari@email.com",
    role: "Admin",
  };

  const getInitials = (name: string): string => {
    return name
      .split(" ")
      .map((word: string) => word[0])
      .join("")
      .slice(0, 2)
      .toUpperCase();
  };

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {
        setOpenUserMenu(false);
        setOpenNotifMenu(false);
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, []);

  return (
    <header className="bg-white shadow-md px-6 py-3 flex items-center justify-between text-black relative w-full">
      <div className="flex-1" />
      <div className="flex justify-center flex-1">
        <Image
          src="/images/logoImage.png"
          alt="Logo SG-FIX"
          width={220}
          height={70}
          priority
        />
      </div>

      <div className="flex items-center gap-5 relative" ref={menuRef}>
        {/* ðŸ‘¤ User Menu (dÃ©placÃ© Ã  gauche) */}
        <div className="relative">
          <div
            className="flex items-center cursor-pointer"
            onClick={() => setOpenUserMenu((v) => !v)}
          >
            <div className="w-10 h-10 bg-gray-300 rounded-full flex items-center justify-center text-base font-semibold hover:bg-gray-400 transition">
              {getInitials(user.name)}
            </div>
            <span className="text-sm font-medium text-gray-700 ml-2">{user.name}</span>
          </div>

          {openUserMenu && (
            <div className="absolute right-0 mt-4 w-56 bg-white rounded-xl shadow-xl border border-gray-100 z-50 animate-fade-in-down py-3 px-4">
              <div className="flex flex-col items-center pb-3 border-b border-gray-200">
                <div className="w-12 h-12 bg-blue-500 rounded-full flex items-center justify-center text-white text-xl font-bold mb-1">
                  {getInitials(user.name)}
                </div>
                <div className="font-semibold text-lg">{user.name}</div>
                <div className="text-sm text-gray-500">{user.email}</div>
                <div className="text-xs text-gray-400">{user.role}</div>
              </div>
              <button
                className="flex items-center gap-2 mt-3 px-2 py-2 w-full text-left text-red-500 hover:bg-gray-100 rounded transition"
                onClick={() => {
                  setOpenUserMenu(false);
                  router.push("/");
                }}
              >
                <LogOut className="w-5 h-5" /> Se dÃ©connecter
              </button>
            </div>
          )}
        </div>

        {/* ðŸ”” Notifications (dÃ©placÃ© Ã  droite) */}
        <div className="relative">
          <div
            className="relative cursor-pointer"
            onClick={() => setOpenNotifMenu((v) => !v)}
          >
            <Bell className="h-8 w-8 text-black" />
            {hasNotification && (
              <span className="absolute -top-1 -right-1 h-3 w-3 rounded-full bg-red-500 border-2 border-white" />
            )}
          </div>

          {openNotifMenu && (
            <div className="absolute right-0 mt-3 z-50 w-screen max-w-md ml-auto">
              <Notifications />
            </div>
          )}
        </div>
      </div>

      <style jsx>{`
        .animate-fade-in-down {
          animation: fadeInDown 0.17s cubic-bezier(.39,.575,.565,1) both;
        }
        @keyframes fadeInDown {
          from { opacity: 0; transform: translateY(-10px) scale(0.98); }
          to { opacity: 1; transform: translateY(0) scale(1); }
        }
      `}</style>
    </header>
  );
};

export default HeaderBar;
