try {
            Set<RoleName> roles = input.getRole().stream()
                .map(role -> {
                    try {
                        return RoleName.valueOf(role);
                    } catch (IllegalArgumentException e) {
                        logger.warn("Invalid role: {}. Skipping this role.", role);
                        return null;
                    }
                })
                .filter(role -> role != null)
                .collect(Collectors.toSet());
            user.setRoles(roles);
            logger.info("Mapped roles: {}", roles);
        } catch (Exception e) {
            logger.error("Error mapping roles: {}", e.getMessage());
            throw new IllegalArgumentException("Invalid roles provided: " + input.getRole(), e);
        }

        UserEntity savedUser = usersRepository.saveUser(user);
        return usersRepository.mapUserToDto(savedUser);
    }
