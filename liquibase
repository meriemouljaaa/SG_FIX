"use client";
import React, { useState } from "react";

type Comment = {
  id: number;
  user: string;
  timeAgo: string;
  content: string;
  likes: number;
  dislikes: number;
  replies?: Comment[];
};

const initialComments: Comment[] = [
  {
    id: 1,
    user: "Ziyech",
    timeAgo: "1 hour ago",
    content:
      "This forest view brings back nostalgic camping vibes, but I'm a bit bothered by the rocks looking too 'geometric.' They don't fit well compared to the more organic shapes elsewhere.",
    likes: 23,
    dislikes: 5,
    replies: [
      {
        id: 2,
        user: "Shakira",
        timeAgo: "23 minutes ago",
        content:
          "Totally agree about the geometric rocks. If their shapes were rounder or had slightly different textures, they'd look much more natural.",
        likes: 15,
        dislikes: 1,
      },
      {
        id: 3,
        user: "Ryan Timber",
        timeAgo: "15 minutes ago",
        content:
          "About the geometric rocks, maybe it's intentional to stay consistent with the low-poly style. But yeah, rounder shapes would probably blend better with the natural vibe.",
        likes: 10,
        dislikes: 3,
      },
    ],
  },
];

export const CommentSection: React.FC = () => {
  const [comments, setComments] = useState<Comment[]>(initialComments);
  const [newComment, setNewComment] = useState("");
  const [replyContent, setReplyContent] = useState<{ [key: number]: string }>({});
  const [showReplyForm, setShowReplyForm] = useState<{ [key: number]: boolean }>({});

  const getCurrentTimeAgo = () => {
    const now = new Date();
    return "Just now";
  };

  const handleLike = (commentId: number, isReply: boolean = false, parentId?: number) => {
    setComments((prevComments) =>
      isReply
        ? prevComments.map((comment) =>
            comment.id === parentId
              ? {
                  ...comment,
                  replies: comment.replies?.map((reply) =>
                    reply.id === commentId ? { ...reply, likes: reply.likes + 1 } : reply
                  ),
                }
              : comment
          )
        : prevComments.map((comment) =>
            comment.id === commentId ? { ...comment, likes: comment.likes + 1 } : comment
          )
    );
  };

  const handleDislike = (commentId: number, isReply: boolean = false, parentId?: number) => {
    setComments((prevComments) =>
      isReply
        ? prevComments.map((comment) =>
            comment.id === parentId
              ? {
                  ...comment,
                  replies: comment.replies?.map((reply) =>
                    reply.id === commentId ? { ...reply, dislikes: reply.dislikes + 1 } : reply
                  ),
                }
              : comment
          )
        : prevComments.map((comment) =>
            comment.id === commentId ? { ...comment, dislikes: comment.dislikes + 1 } : comment
          )
    );
  };

  const handleAddComment = (e: React.FormEvent) => {
    e.preventDefault();
    if (!newComment.trim()) return;
    const newId = comments.length ? Math.max(...comments.map(c => c.id)) + 1 : 1;
    const comment: Comment = {
      id: newId,
      user: "Current User",
      timeAgo: getCurrentTimeAgo(),
      content: newComment,
      likes: 0,
      dislikes: 0,
      replies: [],
    };
    setComments((prev) => [...prev, comment]);
    setNewComment("");
  };

  const handleAddReply = (e: React.FormEvent, parentId: number) => {
    e.preventDefault();
    if (!replyContent[parentId]?.trim()) return;
    const newId = comments.flatMap(c => c.replies || []).length
      ? Math.max(...comments.flatMap(c => c.replies || []).map(r => r.id)) + 1
      : 1;
    const newReply: Comment = {
      id: newId,
      user: "Current User",
      timeAgo: getCurrentTimeAgo(),
      content: replyContent[parentId],
      likes: 0,
      dislikes: 0,
    };
    setComments((prev) =>
      prev.map((comment) =>
        comment.id === parentId
          ? { ...comment, replies: [...(comment.replies || []), newReply] }
          : comment
      )
    );
    setReplyContent((prev) => ({ ...prev, [parentId]: "" }));
    setShowReplyForm((prev) => ({ ...prev, [parentId]: false }));
  };

  const toggleReplyForm = (commentId: number) => {
    setShowReplyForm((prev) => ({ ...prev, [commentId]: !prev[commentId] }));
  };

  return (
    <div className="p-5 max-w-4xl">
      <h3 className="text-xl font-semibold text-gray-900 mb-4">
        Commentaires{" "}
        <span className="bg-gray-200 rounded-full px-2 py-1 text-sm">
          {comments.length}
        </span>
      </h3>

      <form onSubmit={handleAddComment} className="mb-6">
        <textarea
          value={newComment}
          onChange={(e) => setNewComment(e.target.value)}
          placeholder="Add a comment..."
          className="w-full p-3 border rounded-md resize-none h-24 text-gray-700"
        />
        <button
          type="submit"
          className="mt-2 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
        >
          Post Comment
        </button>
      </form>

      {comments.map((comment) => (
        <div key={comment.id} className="border-l-4 border-gray-300 my-5 pl-3">
          <p>
            <strong className="text-gray-800">{comment.user}</strong>{" "}
            <span className="text-gray-500 text-sm">{comment.timeAgo}</span>
          </p>
          <p className="text-gray-700 my-2">{comment.content}</p>
          <div className="flex gap-3 text-gray-600 text-sm">
            <button
              onClick={() => handleLike(comment.id)}
              className="hover:text-blue-600 flex items-center gap-1"
            >
              👍 {comment.likes}
            </button>
            <button
              onClick={() => handleDislike(comment.id)}
              className="hover:text-red-600 flex items-center gap-1"
            >
              👎 {comment.dislikes}
            </button>
            <button
              onClick={() => toggleReplyForm(comment.id)}
              className="text-blue-600 hover:underline"
            >
              Reply ({comment.replies?.length || 0})
            </button>
          </div>

          {showReplyForm[comment.id] && (
            <form
              onSubmit={(e) => handleAddReply(e, comment.id)}
              className="mt-3 pl-5"
            >
              <textarea
                value={replyContent[comment.id] || ""}
                onChange={(e) =>
                  setReplyContent((prev) => ({ ...prev, [comment.id]: e.target.value }))
                }
                placeholder="Add a reply..."
                className="w-full p-3 border rounded-md resize-none h-20 text-gray-700"
              />
              <button
                type="submit"
                className="mt-2 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
              >
                Post Reply
              </button>
            </form>
          )}

          {comment.replies && (
            <div className="mt-3 pl-5 border-l-2 border-gray-200">
              {comment.replies.map((reply) => (
                <div key={reply.id} className="mt-4">
                  <p>
                    <strong className="text-gray-800">{reply.user}</strong>{" "}
                    <span className="text-gray-500 text-sm">{reply.timeAgo}</span>
                  </p>
                  <p className="text-gray-700 my-2">{reply.content}</p>
                  <div className="flex gap-3 text-gray-600 text-sm">
                    <button
                      onClick={() => handleLike(reply.id, true, comment.id)}
                      className="hover:text-blue-600 flex items-center gap-1"
                    >
                      👍 {reply.likes}
                    </button>
                    <button
                      onClick={() => handleDislike(reply.id, true, comment.id)}
                      className="hover:text-red-600 flex items-center gap-1"
                    >
                      👎 {reply.dislikes}
                    </button>
                    <button
                      onClick={() => toggleReplyForm(reply.id)}
                      className="text-blue-600 hover:underline"
                    >
                      Reply
                    </button>
                  </div>
                  {showReplyForm[reply.id] && (
                    <form
                      onSubmit={(e) => handleAddReply(e, comment.id)}
                      className="mt-3 pl-5"
                    >
                      <textarea
                        value={replyContent[reply.id] || ""}
                        onChange={(e) =>
                          setReplyContent((prev) => ({ ...prev, [reply.id]: e.target.value }))
                        }
                        placeholder="Add a reply..."
                        className="w-full p-3 border rounded-md resize-none h-20 text-gray-700"
                      />
                      <button
                        type="submit"
                        className="mt-2 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
                      >
                        Post Reply
                      </button>
                    </form>
                  )}
                </div>
              ))}
            </div>
          )}
        </div>
      ))}
    </div>
  );
};
