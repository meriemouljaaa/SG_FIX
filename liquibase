const handleFinish = async () => {
    if (selected) {
        const selectedUser = users.find(user => user.fullName === selected);
        if (selectedUser) {
            try {
                // Envoi des données au backend
                await IncidentService.assignUser(incidentSelected!.id, selectedUser.igg);
                console.log("Utilisateur assigné avec succès");
                onAssign(); // Appel de la fonction onAssign
                onClose();  // Fermeture de la popup
            } catch (err) {
                console.error("Erreur d'envoi au backend:", err);
                alert("Erreur lors de l'envoi de l'utilisateur sélectionné.");
            }
        }
    }
};
export default function SearchPeople({ onAssign, onClose, incidentSelected }: SearchPeopleProps) {
  const [search, setSearch] = useState("");
  const [selected, setSelected] = useState<string | null>(null);
  const [users, setUsers] = useState<User[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchUsers = async () => {
      try {
        setLoading(true);
        const response = await UserService.listUsers(); // Récupère les utilisateurs depuis le service
        setUsers(response);
        setError(null);
      } catch (err) {
        setError("Erreur lors de la récupération des utilisateurs");
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    fetchUsers();
  }, []);

  const filteredPeople = users.filter((person) =>
    person.firstName.toLowerCase().includes(search.toLowerCase())
  );

  const handleFinish = async (event: React.MouseEvent<HTMLButtonElement>) => {
    event.preventDefault(); // Empêche la soumission par défaut du formulaire
    if (selected) {
      const selectedUser = users.find((user) => user.fullName === selected);
      if (!selectedUser) return;
      try {
        await IncidentService.assignUser(incidentSelected!.id, selectedUser.igg);
        console.log("Utilisateur assigné");
        onAssign();
        onClose();
      } catch (err) {
        console.error("Erreur d'envoi au backend:", err);
        alert("Erreur lors de l'envoi de l'utilisateur sélectionné.");
      } finally {
        setSelected(null);
      }
    }
  };

  if (loading) {
    return (
      <div className="bg-white rounded-xl w-full max-w-2xl mx-auto pb-4 flex items-center justify-center h-64">
        <p className="text-gray-600">Chargement des utilisateurs...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-white rounded-xl w-full max-w-2xl mx-auto pb-4 flex items-center justify-center h-64">
        <p className="text-red-500">{error}</p>
      </div>
    );
  }

  return (
    <div className="bg-white rounded-xl w-full max-w-2xl mx-auto pb-4">
      {/* Barre de recherche */}
      <div className="flex items-center gap-2 border-b border-gray-200 px-3 pt-4 pb-2">
        <Search className="w-5 h-5 text-gray-400" />
        <input
          type="text"
          placeholder="Rechercher une personne..."
          className="flex-1 outline-none bg-transparent text-base text-gray-600 placeholder-gray-400"
          value={search}
          onChange={(e) => setSearch(e.target.value)}
        />
      </div>

      {/* Liste des personnes */}
      <div className="max-h-64 overflow-y-auto pt-2">
        {filteredPeople.map((person, idx) => {
          const isSelected = selected === person.fullName;
          return (
            <div
              key={idx}
              onClick={() => setSelected(person.fullName)}
              className={`flex flex-col gap-2 px-3 py-3 cursor-pointer transition-all duration-200 ${
                isSelected ? "bg-blue-50" : "hover:bg-gray-50"
              }`}
            >
              <div className="flex items-start justify-between">
                <div className="flex items-start gap-3">
                  <div
                    className="w-12 h-12 rounded-full flex items-center justify-center font-semibold text-base"
                    style={{ backgroundColor: stringToColor(person.firstName), color: "#333" }}
                  >
                    {person.firstName.charAt(0).toUpperCase()}
                  </div>
                  <div className="flex flex-col flex-1">
                    <p className="font-medium text-gray-900 text-base">{person.fullName}</p>
                    <p className="text-sm text-gray-500">{person.title}</p>
                  </div>
                </div>
                <div className="flex flex-col items-end gap-1">
                  <div className="flex items-center gap-2">
                    <span className="text-sm text-gray-600">
                      {person.isAvailable ? "Disponible" : "Indisponible"}
                    </span>
                    {isSelected && <CheckCircle className="w-5 h-5 text-blue-600" />}
                  </div>
                  {person.activeIncidents > 0 && (
                    <a
                      href="/core/historique-incident"
                      onClick={(e) => e.stopPropagation()}
                      className="text-sm text-blue-500 hover:underline"
                    >
                      Consulter les incidents
                    </a>
                  )}
                </div>
              </div>
            </div>
          );
        })}
      </div>

      {/* Bouton Terminer */}
      <div className="flex justify-end px-4 mt-4">
        <button
          type="button"  {/* Ajout de type="button" pour empêcher le comportement par défaut */}
          className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
          onClick={handleFinish}
          disabled={!selected}
        >
          Terminer
        </button>
      </div>
    </div>
  );
}
