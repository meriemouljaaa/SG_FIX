package com.socgen.unibank.core.usecase.model;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.util.Date;

public class GetIncidentsByDuRequest {

    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    private Date dateDebut;

    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    private Date dateFin;

    public GetIncidentsByDuRequest() {}

    public Date getDateDebut() {
        return dateDebut;
    }

    public void setDateDebut(Date dateDebut) {
        this.dateDebut = dateDebut;
    }

    public Date getDateFin() {
        return dateFin;
    }

    public void setDateFin(Date dateFin) {
        this.dateFin = dateFin;
    }
}
package com.socgen.unibank.core.usecase.model;

import java.util.List;

public class GetIncidentsByDuResponse {
    private List<String> labels; // noms des DU
    private List<Long> data;     // nombre d'incidents par DU

    public GetIncidentsByDuResponse(List<String> labels, List<Long> data) {
        this.labels = labels;
        this.data = data;
    }

    public List<String> getLabels() {
        return labels;
    }

    public List<Long> getData() {
        return data;
    }
}
package com.socgen.unibank.core.usecase;

import com.socgen.unibank.core.usecase.model.GetIncidentsByDuRequest;
import com.socgen.unibank.core.usecase.model.GetIncidentsByDuResponse;

public interface GetIncidentsByDuUseCase {
    GetIncidentsByDuResponse handle(GetIncidentsByDuRequest request);
}
package com.socgen.unibank.core.handler;

import com.socgen.unibank.core.usecase.GetIncidentsByDuUseCase;
import com.socgen.unibank.core.usecase.model.GetIncidentsByDuRequest;
import com.socgen.unibank.core.usecase.model.GetIncidentsByDuResponse;
import com.socgen.unibank.ports.out.IncidentRepositoryPort;
import lombok.RequiredArgsConstructor;

import java.util.List;
import java.util.stream.Collectors;

@RequiredArgsConstructor
public class GetIncidentsByDuHandler implements GetIncidentsByDuUseCase {

    private final IncidentRepositoryPort repository;

    @Override
    public GetIncidentsByDuResponse handle(GetIncidentsByDuRequest request) {
        List<Object[]> rawStats = repository.countIncidentsByDuBetween(
            request.getDateDebut(),
            request.getDateFin()
        );

        List<String> labels = rawStats.stream().map(r -> r[0].toString()).collect(Collectors.toList());
        List<Long> data = rawStats.stream().map(r -> ((Number) r[1]).longValue()).collect(Collectors.toList());

        return new GetIncidentsByDuResponse(labels, data);
    }
}
package com.socgen.unibank.ports.out;

import java.util.Date;
import java.util.List;

public interface IncidentRepositoryPort {
    List<Object[]> countIncidentsByDuBetween(Date start, Date end);
}
package com.socgen.unibank.adapters.persistence;

import com.socgen.unibank.ports.out.IncidentRepositoryPort;
import com.socgen.unibank.services.gateways.outbound.persistence.jpa.IncidentRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Repository;

import java.util.Date;
import java.util.List;

@Repository
@RequiredArgsConstructor
public class IncidentRepositoryAdapter implements IncidentRepositoryPort {

    private final IncidentRepository jpaRepository;

    @Override
    public List<Object[]> countIncidentsByDuBetween(Date start, Date end) {
        return jpaRepository.countIncidentsByDuBetweenDates(start, end);
    }
}
package com.socgen.unibank.services.gateways.outbound.persistence.jpa;

import com.socgen.unibank.services.gateways.outbound.persistence.jpa.IncidentEntity;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import java.util.Date;
import java.util.List;

public interface IncidentRepository extends JpaRepository<IncidentEntity, Long> {

    @Query("SELECT i.service.nom, COUNT(i) FROM IncidentEntity i " +
           "WHERE i.dateDeclaration BETWEEN :start AND :end " +
           "GROUP BY i.service.nom")
    List<Object[]> countIncidentsByDuBetweenDates(@Param("start") Date start, @Param("end") Date end);

}
